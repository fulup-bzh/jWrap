
# Copyright(c) 1999 FRIDU a Free Software Company
# 
# Projet       : jWrap
# SubModule    : WTX VxWorks Tornado Interface
# Author       : Fulup Le Foll (Fulup@iu-vannes.fr)
# 
# Last: 
#  Author      : $Author: Fulup $ Date        :
#  Date        : $Date: 1999/03/19 08:09:28 $
#  Revision    : $Revision: 1.4 $
#  Source      : $Source: /Master/jWrap/tornado/wrs/Tcl/shellCore.jTcl,v $
# 
# Modification History
# --------------------
# 05mar99,Fulup written from WRS shellCore.tcl

jClassImport jWrap.tornado.wtx.*


# Set list a knowned classbname list
set classNameList {qJob class qPriListFromTail symTbl memPart \
		   sem semPx qPriBMap task qFifo wd qPriList hash   \
		   module msgQ mq fp rBuff trg}


##-----------------------------------------------------------------------------
# initClassNames - initialize the global className associative array
#
# For each class name listed in the global variable classNameList, a symbol
# is sought on the target named "<classname>ClassId".  If such is found, 
# an entry is made in the global associative array className as follows:
#   $className(<class-id-in-hex>) == <class-name>
# This can be used to map the objCore field of an object to the class name
# of the object.
#
# SYNOPSIS:
#   initClassNames
#
# PARAMETERS:
#   NONE
#
# -----------------------------------------------------------------------------
proc initClassNames {} {
    global className
    global classNameList
    global TORNADO

    foreach class $classNameList {
	if {! [catch {Tornado.ExecFindSymbol $TORNADO(id) "${class}ClassId"} addr]} {
	    if {! [catch {Tornado.DirectGopher $TORNADO(id) id "$addr @" }]} {
		if {$id != 0} {
		    set className([format "0x%x" $id]) $class
		}
	    }
        }
	if {! [catch {Tornado.ExecFindSymbol $TORNADO(id)"${class}InstClassId"} addr]} {
	    if {! [catch {Tornado.DirectGopher $TORNADO(id) id "$addr @" }]} {
		if {$id != 0} {
		    set className([format "0x%x" $id]) $class
		}
	    }
	}
    }
}

##----------------------------------------------------------------------
# test whether a given ID matches a class name
#
# PARAMETERS:
#   objId: the ID of the object to test
#   class: the name of the class to check membership in
#
# RETURNS:
#   0 if objId is not a member of the named class
#  !0 if objId is a member of the named class
#   
## ----------------------------------------------------------------------

proc checkClassId {objId class} {
    global className
    if ![info exists className($objId)] {return 0}
    return [expr {$className($objId) == "$class"}]
}

##-----------------------------------------------------------------------
# targetInitCheck - check whether the target system is initialized
#
# This routine tries to determine whether or not the target system (i.e.
# VxWorks) is already initialized when the tools attached to the target
# server. This may be necessary to prevent a tool to fetch data within
# data structures not initialized yet.
#
# SYNOPSIS:
#   targetInitCheck
#
# PARAMETERS: N/A
#
# RETURNS:
#   1 - if the target system is initialized
#   0 - if the target system is not initialized yet (system mode debug)
#
# ERRORS:
## ----------------------------------------------------------------------
proc Shell.CoreInit {} {

    global TORNADO
    global cpuFamily
    global offset
    global __wtxCpuType
    global pcGetGopher
    global spGetGopher

    # get tornado info struct from target server
    set TORNADO(tsinfo)     [Wtx.TsInfoGet $TORNADO(wtxId)]
    set TGT_INFO            [jWrap cget $TORNADO(tsinfo) tgtInfo]
    set RT_INFO             [jWrap cget $TGT_INFO rtInfo]
    set TORNADO(wtxCpuType) [jWrap cget $RT_INFO  cpuType]
    set TORNADO(endian)     [jWrap cget $RT_INFO  endian]
    set TORNADO(wtxCpuFamily) $cpuFamily($TORNADO(wtxCpuType))

    # get WRS ressource directory
    set TORNADO(resourceDir) [jClassName jWrap.tornado.res.*]

    # keep old WRS name for compatibility with ressource file
    set __wtxCpuType $TORNADO(wtxCpuType)

    # Read in the cpu-family specific material, based on the cpuType value
    # obtained from wtxTsInfoGet.
    uplevel #0 source \
	$TORNADO(resourceDir)/sh-$TORNADO(wtxCpuFamily).tcl

    # A gopher that will get the data from the TCB necessary to print one
    # line of the i command (this is used in several places in the shell and
    # browser). This gopher fragment is meant to be executed when the
    # pointer contains the address of the TCB, and fetches the status,
    # normal and current priorities, pc and sp, and a few other
    # interesting entries from that structure.

    set TORNADO(iCommandGopher) "
        <+$offset(WIND_TCB,status) @>
        <+$offset(WIND_TCB,priority) @>
        $pcGetGopher
        $spGetGopher
        <+$offset(WIND_TCB,errorStatus) @>
        <+$offset(WIND_TCB,timeout) @>
        <+$offset(WIND_TCB,entry) @>
        <+$offset(WIND_TCB,priNormal) @>
        <+$offset(WIND_TCB,name) *$>"

    # intialize eeMemBlock with 0xee.
    set TORNADO(eeMemBlock) [Tornado.MemBlock TORNADO_MEM_HEXA 0xee]
 
    # create the association of class ID to class name.
    initClassNames

}

##------------------------------------------------------------------------
# targetInitCheck - check whether the target system is initialized
#
# This routine tries to determine whether or not the target system (i.e.
# VxWorks) is already initialized when the tools attached to the target
# server. This may be necessary to prevent a tool to fetch data within
# data structures not initialized yet.
#
# SYNOPSIS:
#   targetInitCheck
#
# PARAMETERS: N/A
#
# RETURNS:
#   1 - if the target system is initialized
#   0 - if the target system is not initialized yet (system mode debug)
#
# ERRORS:
##------------------------------------------------------------------------

# static init to false
set TORNADO(TargetIsInitialized) false

proc Shell.CoreTargetInitCheck {} {
    global TORNADO

    # First check if we have not already passed succesfully this test
    if {$TORNADO(TargetIsInitialized)} {
       return 1
    }

    # If we can't find the symbol activeQHead, vxWorks is certainly not
    # loaded on the target. In that case, we consider that the system
    # is not initialized.
    if [catch {Tornado.ExecFindSymbol $TORNADO(id) "activeQHead"} result] {
       return -code error "Hug did not find symbol activeQHead"
    } else {
      # get activeQHead address
      set activeQHead $result
    }

    # Read value stored in activeQHead's class ID
    Tornado.DirectGopher $TORNADO(id) [list activeQClassId] "$activeQHead + 12 @"

    # If activeQHead is initialized
    # its class ID will be qFifoClassId
    #
    # Note the subtle use of lindex so that qFifoClassId
    # will be treated as a number and not a string in the
    # comparison below!
    set qAddr [Tornado.ExecFindSymbol $TORNADO(id) "qFifoClassId"]
    Tornado.DirectGopher $TORNADO(id) [list qFifoClassId] "$qAddr @"

    if {$activeQClassId == $qFifoClassId} {
	set TORNADO(TargetIsInitialized) true
	return 1
    } else {
        return 0
    }
}


##----------------------------------------------------------------------
# activeQueue - return the active queue (task IDs only)
#
# SYNOPSIS:
#   activeQueue
#
# PARAMETERS:
#   priority - if true, fetch priorities along with task IDs
#
# RETURNS:
#   a list of task IDs (and priorities, if priority is true).
#
# ERRORS:
#   NONE
## ----------------------------------------------------------------------
proc Shell.CoreActiveQueue {priority} {
    global offset
    global TORNADO

    # Check that the target system has been correctely initialized before
    # proceeding

    if {! [Shell.CoreTargetInitCheck]} {
	error "The target system is not initialized yet. Can't proceed."
    }

    set aqHead [Tornado.ExecFindSymbol $TORNADO(id) "activeQHead"]
    if {$priority} {
       Tornado.DirectGopher $TORNADO(id) aq "$aqHead * 
	                       { <-$offset(WIND_TCB,activeNode) !
	                           <+$offset(WIND_TCB,priority) @>> * }"
    } {
	Tornado.DirectGopher aq $TORNADO(id) "$aqHead * 
	                       { <-$offset(WIND_TCB,activeNode) !> * }"
    }
    return $aq
}


##-------------------------------------------------------------------------------
# taskInfoGetAll - return a taskInfoList for each running task
#
# SYNOPSIS:
#   taskInfoGetAll
#
# PARAMETERS:
#   NONE
#
# RETURNS:
#   The current value of vxTicks, followed by the following 10 items for
#   each running task:
#     taskId status priority pc sp errno timeout entry priNormal name
#   The resulting list will have 10*n+1 items, where n is the number
#   of running tasks.
#
# ERRORS:
#   NONE
## ------------------------------------------------------------------------
proc Shell.CoreTaskInfoGetAll {} {
    global offset
    global TORNADO

    # Check that the target system has been correctely initialized before
    # proceeding

    if {! [Shell.CoreTargetInitCheck]} {
	error "The target system is not initialized yet. Can't proceed."
    }

    set aqHead  [Tornado.ExecSymFind $TORNADO(id) activeQHead]
    set vxTicks [Tornado.ExecSymFind $TORNADO(id) vxTicks]
    Tornado.DirectGopher  $TORNADO(id) RESULT "$vxTicks @
			   $aqHead * { < -$offset(WIND_TCB,activeNode) ! 
			       $TORNADO(iCommandGopher)
			       >*}"
    return RESULT
}


##--------------------------------------------------------------------------
# taskInfoGet - get information about a particular task
#
# taskInfoGet gets enough information for one row of the "i" command, 
# but also performs the service of validating that the given object
# is in fact still a task, by checking the objCore pointer.
#
# SYNOPSIS:
#   taskInfoGet taskId
#
# PARAMETERS:
#   taskId: the task to fetch information about
#
# RETURNS:
#   A list of 11 items:
#     vxTicks taskId status priority pc sp errno timeout entry priNormal name
#
# ERRORS:
#   NONE
##----------------------------------------------------------------------------
proc Shell.CoreTaskInfoGet {taskId} {
    global className
    global offset
    global TORNADO


    # Fulup I supose this information is static 
    if {![info exist TORNADO(sym-vxTicks)]} {
      set TORNADO(sym-vxTicks) [Tornado.ExecFindSymbol $TORNADO(id) vxTicks]
    }

    Tornado.DirectGopher $TORNADO(id) tiList "$TORNADO(sym-vxTicks) @
                           $taskId !
                           < +$offset(WIND_TCB,objCore) @ >
			   $TORNADO(iCommandGopher)"

    # Pick out the objCore and compare it to taskClassId.
    set objCore [lindex $tiList 2]
    if {$objCore != 0} {
	if {$className($objCore) != "task"} {
	    error "not a task"
	}
    }

    # if this is the WDB task for the i960 then go get the sp value
    # from the TCB

    set name [lindex $tiList 11]

    if {($TORNADO(wtxCpuFamily) == "i960") && ($name == "tWdbTask")} {
       Tornado.DirectGopher $TORNADO(id) pc "$taskId <+$offset(WIND_TCB,pc) @"
       Tornado.DirectGopher $TORNADO(id) sp "$taskId <+$offset(WIND_TCB,sp) @"

       set tiList [lreplace $tiList 5 6 $pc $sp]
       }

    return [concat [lrange $tiList 0 1] [lrange $tiList 3 end]]
}

##-------------------------------------------------------------------------
# taskStatus - return a string representation of a task's status code
#
# SYNOPSIS:
#   taskStatus stat inherit
#
# PARAMETERS:
#   status: the status word from the TCB of some task
#   inherit: whether the task has an inherited priority
#
# RETURNS:
#   The traditional name of the state given by the "i" command in VxWorks:
#   one of {READY,SUSPEND,PEND,DELAY,DEAD}, possibly followed by one or 
#   more of "+S", "+T", or "+I".  An unknown status code is represented as 
#   a hex number followed by "?".
#
# ERRORS:
#   NONE
##--------------------------------------------------------------------------
proc Shell.CoreTaskStatus {stat inherit} { 
    case [expr $stat] {
        0	{set s READY}
        1	{set s SUSPEND}
	2	{set s PEND}
	3	{set s PEND+S}
	4	{set s DELAY}
	5	{set s DELAY+S}
        6	{set s PEND+T}
	7	{set s PEND+S+T}
	8	{set s DEAD}
	*	{set s [format "%#x?" $stat]}
    }
    if $inherit {set s $s+I}
    return $s
}


















