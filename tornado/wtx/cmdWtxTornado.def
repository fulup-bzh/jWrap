# 1 "cmdRuntimeTornado.h"
/* -------------------------------------------------------------
 *   WARNING:   jWrap header should be at top of file
 *   Help:      Tornado VxWorks WTX interface with target server
 *   Interface: Wtx
 *-------------------------------------------------------------*/

/** ------------------------------------------------------------
 *
 * Copyright(c) 1997-99 FRIDU a Free Software Company
 *
 * File   	: libWtxHost.h Interface for VxWorks/Tornado test lib
 * Projet       : jWrap
 * SubModule    : jWrap/Wtx VxWorks/Tornado WTX interface
 * Author       : Fulup Ar Foll (Fulup@fridu.bzh)
 *
 * Last:
 *  Author      : $Author: Fulup $
 *  Date        : $Date: 1999/03/11 12:49:31 $
 *  Revision    : $Revision: 1.3.0.1 $
 *  Source      : $Source: /Master/jWrap/tornado/wtx/cmdWtxTornado.def,v $
 *
 * Modification History
 * -------------------
 * 01a,05may98, Fulup Written
 *
 * -----------------------------------------------------------------------*/

/* We use an absolute path in order not including all VxWorks with CPP */


# 1 "/pMaster/tornado-1.01/host/include/wtx.h" 1
/* wtx.h - wtx protocol header file */

/* Copyright 1984-1996 Wind River Systems, Inc. */

/*
modification history
--------------------
02s,30sep96,elp  put in share/, added wtxObjModuleUndefSymAdd(),
		 wtxSymAddWithGroup() (SPR# 6775).
02r,27sep96,sjw  correct prototype for wtxTsVersionGet, was wtsTsVersionGet
02q,18sep96,dgp  doc: change spelling of alignement to alignment for API Guide
		 in wtxMemAlign
02p,05sep96,elp	 changed val in wtxMemSet() from UINT8 to UINT32 (SPR# 6984).
02o,02sep96,jmp  added wtxToolIdGet() prototypes,
		 added WTX RPC service number argument to wtxServiceAdd().
02n,30aug96,elp	 changed wpwrVersionGet() into wtxTsVersionGet().
02m,17jun96,p_m	 changed type of flags parameter in wtxFileOpen() (SPR# 4941).
02l,30may96,elp	 added wtxToolNameGet(), wpwrVersionGet(), wtxServiceAdd() and
		 wtxSymTblInfoGet() prototypes (SPR# 6502).
02k,09nov95,p_m  removed un-necessary version defines.
02h,03nov95,jmp  added wtxErrSet() prototype.
02g,25oct95,p_m  added wtxAgentModeGet() (SPR# 5231) and wtxDirectCall().
02f,26sep95,s_w  rename wtxBreakpointDelete() to wtxEventpointDelete()
                 (SPR 4852)
02e,05sep95,s_w	 add WTX_LD_M_FILE_DESC type and change wtxObjModuleLoad()
		 prototype (for SPR 4598)
02d,08jun95,c_s  added wtxTargetAttach().
02c,02jun95,p_m  added WTX_PROTOCOL_VERSION.
02b,01jun95,p_m  replaced isText by contextType and added returnType in
		 WTX_CONTEXT_DESC. Changed wtxFuncCall() parameters to
		 WTX_CONTEXT_DESC.
02a,26may95,s_w  add wtxSymListGet(), wtxSymRemove(), wtxEventpointList(),
		 wtxMemScan(), wtxVioFileList(), wtxContextExitNotifyAdd()
		 and correct the K&R prototype for wtxStrToEventType().
01z,22may95,s_w  add wtxTsRestart(), wtxVioChanGet() and wtxVioChanRelease().
01y,22may95,jcf  name revision.
01x,14may95,s_w  Removed use of WTX messages in API calls and added extra
		 target info routines. Use exchange API to make calls.
01w,15may95,c_s  added wtxEndian().
01v,04may95,s_w  major re-write for cleanup of WTX C library and addition
		 of error handling routines. Also restruction of headers.
01u,03may95,p_m  changed EVT_ to WTX_EVT_ and removed EVT_CALL_GOT_EXC
		 and EVT_BREAKPOINT.
01t,20apr95,p_m  integrated more WIN32 changes. added wtxShutdown().
01s,10apr95,p_m  moved event strings from "tsevt.h" and added EVT_TOOL_MSG.
		 added wtxMsgErrSet() that was removed by mistake.
01r,09apr95,s_w  correct prototype for wtxErrClear and wtxToolAttachHookSet
01q,09apr95,p_m  added missing prototypes and WTXC_EVT_TYPE.
01p,08apr95,p_m  completed C API.
01o,03mar95,p_m  added wtxMsgErrSet().
01n,28feb95,p_m  added WTX_MAX_SYM_CNT.
01m,23feb95,pad  changed WTX_MAX_SERVICE_CNT to 500.
01l,17feb95,p_m  changed delete to dlete in wtxExchangeInstall to please g++.
01k,08feb95,p_m  added MAX_OBJ_SEG_CNT and MAX_LD_M_SECTION_CNT taken from
		 xdrwtx.c. removed unnecessary constants.
		 made all limits prefix be WTX_MAX_.
01j,02feb95,p_m  merged all status in WTX_ERROR_T.
01i,22jan95,jcf  added new status returns.
01h,20jan95,jcf  changed include to wtxtypes.h.
01g,20dec94,p_m  now use wtxrpc.h generated by rpcgen from wtx.x.
		 added S_wtx_AGENT_SERVICE_NOT_AVAIL.
		 added S_wtx_TARGET_NOT_ATTACHED.
01f,16nov94,p_m  added WTX_EVENT_ADD and wtxSvcInit().
		 removed S_wtx_NOT_ENOUGH_MEMORY. Changed errno numbers.
		 added S_wtx_NO_SCALABLE_AGENT and S_wtx_WIND_BASE_NOT_SET.
01e,14nov94,p_m  changed WTX_VIO_OPEN to WTX_OPEN and WTX_VIO_CLOSE
		 to WTX_CLOSE.  added S_wtx_INVALID_FLAGS.
01e,11nov94,p_m  changed WTX_EVAL_GOPHER to WTX_GOPHER_EVAL.
01d,27oct94,p_m  added WTX_CONTEXT_RESUME.
01c,24oct94,p_m  added WTX_FUNC_CALL_PRI.
01b,20oct94,p_m  added error codes.
01a,06oct94,p_m  written.
*/


#define __INCwtxh	1
















# 1 "/pMaster/tornado-1.01/host/include/wtxtypes.h" 1
/* wtxtypes.h - WTX fundamental type definition */

/* Copyright 1984-1996 Wind River Systems, Inc. */

/*
modification history
--------------------
01v,31dec96,dgp  doc: more spelling corrections
01u,06dec96,dgp  doc: correct spelling
01t,30sep96,elp  put in share/ (SPR# 6775).
01s,04sep96,dgp  doc: removed WTX_O_RDWR from WTX_OPEN_FLAG since no longer
		 supported per SPR #5959
01r,17jun96,p_m  added flags for WTX_OPEN (SPR# 4941).
01q,26may95,p_m  added WTX_MAX_PATTERN_LEN.
01p,23may95,p_m  changed WTX_CTX... and WTX_REG_SET... values.  Took care
		 of wtx_event_type comments length for manual generation.
01o,19may95,tpr  moved TGT_ADDR_T and TGT_ARG_T in host.h.
          + p_m  removed DETECTION related stuff.
01m,17may95,s_w  extended WTX_EVENT_TYPE to have all target server generated
                 events. Because WTX_EVENT_TYPE is mapped to WDB_EVENT_TYPE
		 in the target server event numbering was made to match
		 for event types 0 through 8.
01l,16may95,p_m  added object kill operations defines.
01k,09may95,p_m  removed WTX_CORE from WTX_DESC and WTX_DESC_Q.
01j,05may95,p_m  changed WTX_STATUS and WTX_REQUEST type to unsigned long.
                 added protocol version number in WTX_CORE.
01i,04may95,s_w  removed include of <rpc/rpc.h> and typedef of WTX_ID. Added
		 WTX_MAX_xxx limit defines that were in wtx.h. Remove HWTX
		 definition that belongs in wtx.h
01h,20apr95,p_m  integrated more WIN32 changes.
01g,08apr95,p_m  added HWTX and _WTX.
01f,04apr95,p_m  added WTX agent mode type.
01e,03apr95,p_m  get rid 0f 0x0 in wtx_action_type.
01d,30mar95,p_m  added new types to completely separate WTX from the
		 agent protocols. removed #include "comtypes.h".
01c,15mar95,p_m  changed #include "vxWorks.h" to #include "host.h".
01b,10jan95,p_m  added basic types.  added #include "comtypes.h" and
		 #include "wtxerr.h".  cleanup.
01a,20jan95,p_m  written.
*/


#define __INCwtxtypesh






# 1 "/pMaster/tornado-1.01/host/include/host.h" 1
/* host.h - header for host application code */

/* Copyright 1993-1996 Wind River Systems, Inc. */

/*
modification history
--------------------
02f,17oct96,bss  added check for external definition of ERROR (SPR# 7297).
02e,22jul96,c_s  rs6000-aix4 host port. Adjust #includes, work around AIX's
           +pad  definitions of BIG_ & LITTLE_ENDIAN, define HOST_TYPE.
                 Redefined malloc as a macro since malloc(0) is not valid
                 for AIX.
02d,17jul96,wmd  added code to undefine ERROR for WIN32 and move its definition
		 (spr# 6897).
02c,16feb96,pad  added CHECK_2_ALIGN macro.
02b,11nov95,sks  fix HOST_TYPE macro to be more specific for a WIN32 host.
02a,19oct95,c_s  guard SIGHANDLER from non-ANSI compilation environments.
01z,05oct95,c_s  HPUX pty fixes.
01y,20sep95,c_s  added #define of HAVE_STREAMS_TERMIO in SUN4_SOLARIS2 case
                 (SPR #4677, #4744).
01x,31aug95,c_s  added typedef SIGHANDLER; changed def of HOST_TYPE for WIN32.
01w,17jun95,p_m  removed space before #defines.
01v,11jun95,c_s  fixed UNPACK_L32.
01u,09jun95,s_w	 put in more WIN32 changes for g_h.
01t,07jun95,c_s  made PACK/UNPACK macros endian-safe.
01s,30may95,s_w  put in WIN32 changes from Greg.
01r,30may95,p_m  added Solaris-2 and HP-UX  support.
01q,19may95,tpr  added TGT_ADDR_T, TGT_ARG_T and TGT_INT_T type definition.
01p,15may95,s_w  don't define strtoul and callrpc for WIN32
01o,14may95,s_w  added definitions of WTX_ERROR and WTX_OK macros. Also don't
		 define ERROR and OK if already defined. Added declaration
		 of strtol and gethostname for sun4-sunos4 GNU compilation.
01n,04may95,c_s  fixed UNPACK_{16,32} macros.
01m,04may95,pad  suppressed conflicting declaration for gcc 2.6.3
01l,20apr95,p_m  integrated more WIN32 changes.
01k,16apr95,p_m  made HOST_TYPE be sun4-sunos4 instead of sun4 and replaced
		 sun4 with SUN4_SUNOS4.
01j,16mar95,p_m  made basic types be typedef instead of #define.
01i,15mar95,p_m  completed basic types definitions and merged with old
		 vxWorks.h.  made all basic types be #defined instead
		 of typedef in order to allow external definitions of
		 basic types.  This is needed on some Microsoft platforms.
01h,13mar95,c_s  added PACK_16 and PACK_32, the analogues of the UNPACK macros.
01g,28feb95,p_m  added WIN32 stuff.
01f,30jan95,tpr  added HOST_TYPE.
01e,20jan95,jcf  made more portable.
01d,15dec94,pad  added some casting to please acc.
01c,07dec94,pad  added several macro definitions (SWAB_16, SWAB_16_IF,
		 UNPACK_16...)
01b,14feb94,c_s  added material for HP-UX port.
01a,27sep93,c_s  written.
*/


#define __INChosth





/* basic types defines */


#define		STATUS_T	int


#define 	BOOL_T		int


#define		INT8_T		char


#define 	UINT8_T		unsigned char


#define		INT16_T		short


#define		UINT16_T	unsigned short


#define		INT32_T		int


#define		UINT32_T	unsigned int


#define		UCHAR_T		unsigned char


#define		USHORT_T	unsigned short


#define 	UINT_T		unsigned int


#define		ULONG_T		unsigned long


/* typedefs */

typedef unsigned long	TGT_ADDR_T;	/* target address */
typedef unsigned long	TGT_ARG_T;	/* target function argument */
typedef long		TGT_INT_T;	/* target function integer */

/* Basic type definitions to be used for portability */

typedef int 	STATUS;		/* return status */
typedef int 		BOOL;		/* boolean */
typedef char 		INT8;		/* 8 bits signed integer */
typedef unsigned char 		UINT8;		/* 8 bits unsigned integer */
typedef short 		INT16;		/* 16 bits signed integer */
typedef unsigned short 	UINT16;		/* 16 bits unsigned integer */
typedef int 		INT32;		/* 8 bits unsigned integer */
typedef unsigned int 	UINT32;		/* 32 bits unsigned integer */

/* obsolete types */

/*
 * The 4 types below are needed for backward compatibility with VxWorks
 * code reused in the target server and tools.
 * These types should not be used, instead use the types defined above
 * (INT8, INT8, etc...)
 */

typedef unsigned char 		UCHAR;		/* 8 bits unsigned character */
typedef unsigned short 	USHORT;		/* 16 bits unsigned integer */
typedef unsigned int 		UINT;		/* 32 bits unsigned integer */
typedef unsigned long 		ULONG;		/* 32 bits unsigned long */

/*
 * Most compilation environments say the prototype of a signal handler
 * is void (*) (int).  But SunOS 4 insists on void (*) (int, ...).
 */





typedef void (*SIGHANDLER) (int);









typedef int 		(*FUNCPTR) ();		/* pfunction returning int */
typedef void 		(*VOIDFUNCPTR) (); 	/* pfunction returning void */
typedef double 		(*DBLFUNCPTR) ();  	/* pfunction returning double*/
typedef float 		(*FLTFUNCPTR) ();  	/* pfunction returning float */






/* declarations */

# 193 "/pMaster/tornado-1.01/host/include/host.h"


/* Both CenterLine and SparcWorks need definition of strtoul (),
   in the SunOS4 case. */


















# 224 "/pMaster/tornado-1.01/host/include/host.h"


/* includes */






# 250 "/pMaster/tornado-1.01/host/include/host.h"


# 1 "/pMaster/tornado-1.01/host/include/cputypes.h" 1
/* cputypes.h - VxWorks CPU definitions header */

/* Copyright 1984-1995 Wind River Systems, Inc. */

/*
modification history
--------------------
01j,01mar96,ism  added SIMSPARCSOLARIS
01k,29jun96,kkk  added CW4000 & R4650.
01j,16jun96,tpr  added PowerPC 505, PowerPC 602 and PowerPC 860.
01i,12jan96,myz  added I960HX.
01h,31oct95,pad  added PPC processors and family.
01g,28sep95,p_m  added I960JX.
01f,18jul95,p_m  re-installed tron references, they are still used in shell.yac.
01e,18jul95,p_m  added MC68LC040 CPU. removed tron references.
01d,06mar95,p_m  upgraded to 5.2 CPU types numbering.
01c,20jan95,jcf  made more portable.
01b,12nov94,pad  modified cpu numbers to take in account vxSim and simHppa.
01a,08nov94,pad  created
*/


#define __INCcputypesh






/* CPU types */

/* The Green Hills compiler pre-defines "MC68000"!! */




#define MC68000		1
#define MC68010		2
#define MC68020		3
#define MC68030		4
#define MC68040		5
#define MC68LC040	6
#define MC68060		7
#define CPU32		8
#define MC680X0		9

#define SPARC		10
#define SPARClite	11

#define I960		20
#define I960CA		21
#define I960KA		22
#define I960KB		23
#define I960JX		24
#define I960HX		25

#define TRON		30
#define G100		31
#define G200		32

#define MIPS		40
#define R3000		41
#define R33000		42
#define R33020		43
#define R4000		44
#define CW4000		45
#define R4650		46

#define AM29XXX		50
#define AM29030		51
#define AM29200		52
#define AM29035		53

#define SIMSPARCSUNOS	60

#define SIMHPPA		70

#define I80X86		80
#define I80386		81
#define I80486		82

#define PPC		90
#define PPC601		91
#define PPC602		92
#define PPC603		93
#define PPC604		94
#define PPC403		95
#define PPC505		96
#define PPC860		97

#define SIMSPARCSOLARIS 61

/* define CPU to default (SPARC) if undefined */


#define CPU	SPARC


/* define the CPU family based on the CPU selection */









#define CPU_FAMILY      SPARC

































# 252 "/pMaster/tornado-1.01/host/include/host.h" 2


/* definitions */

#define FAST		register


#define BIG_ENDIAN	0

#define LITTLE_ENDIAN	1




#define HOST_BYTE_ORDER		LITTLE_ENDIAN





















#define NAME_MAX		_POSIX_NAME_MAX

#define PATH_MAX		_POSIX_PATH_MAX

#define MAX_FILENAME_LENGTH	(_POSIX_PATH_MAX + 1)

/* memory alignment macros */

#define ROUND_UP(x, align)      (((int) (x) + (align - 1)) & ~(align - 1))
#define ROUND_DOWN(x, align)    ((int)(x) & ~(align - 1))
#define ALIGNED(x, align)       (((int)(x) & (align - 1)) == 0)

#define _ALLOC_ALIGN_SIZE	0x4
#define MEM_ROUND_UP(x)         ROUND_UP(x, _ALLOC_ALIGN_SIZE)
#define MEM_ROUND_DOWN(x)       ROUND_DOWN(x, _ALLOC_ALIGN_SIZE)
#define MEM_ALIGNED(x)          ALIGNED(x, _ALLOC_ALIGN_SIZE)

# 321 "/pMaster/tornado-1.01/host/include/host.h"



#define IMPORT		extern
#define LOCAL		static


#define NULL		0



#define EOF		(-1)



#define FALSE		0



#define TRUE		1


#define NONE		(-1)
#define EOS		'\0'

/* I/O input, output, error fd's */

#define	STD_IN	0
#define	STD_OUT	1
#define	STD_ERR	2

/* common macros */

#define MSB(x)	(((x) >> 8) & 0xff)
#define LSB(x)	((x) & 0xff)

/* swap the MSW with the LSW of a 32 bit integer */
#define WORDSWAP(x) (MSW(x) | (LSW(x) << 16))

#define LLSB(x)	((x) & 0xff)
#define LNLSB(x) (((x) >> 8) & 0xff)
#define LNMSB(x) (((x) >> 16) & 0xff)
#define LMSB(x)	 (((x) >> 24) & 0xff)
#define LONGSWAP(x) ((LLSB(x) << 24) | (LNLSB(x) << 16)| (LNMSB(x) << 8) | (LMSB(x)))




/* Swap of two bytes : AB becomes BA */

#define SWAB_16(x)	(((UINT16)((x) & 0x00ff) << 8) | ((UINT16)((x) & 0xff00) >> 8))


/* Swap of four bytes : ABCD becomes DCBA */

#define SWAB_32(x)	(((UINT32)((x) & 0x000000ff) << 24) | ((UINT32)((x) & 0x0000ff00) << 8)  | ((UINT32)((x) & 0x00ff0000) >> 8)  | ((UINT32)((x) & 0xff000000) >> 24))




/* Swap only if the boolean (b) is true */

#define SWAB_16_IF(b,v)		((v) = ((b) ? SWAB_16 (v) : (v)))
#define SWAB_32_IF(b,v)		((v) = ((b) ? SWAB_32 (v) : (v)))

/*
 * The following macros allow to read 16 bit or 32 bit data whatever address
 * is used. If the address is 4-byte aligned, then the bits are read in one
 * chunk. Otherwise, they are read as a succession of bytes.
 */

#define UCHP(p)		(*(UINT8 *)(p))
#define UCHPO(p,o)	(*(((UINT8 *)p)+(o)))

#define UNPACK_16(adr)   ((HOST_BYTE_ORDER == BIG_ENDIAN) ? (UNPACK_B16 (adr)) : (UNPACK_L16 (adr)))



#define UNPACK_B16(adr)	((UINT16)(UCHP(adr) << 8 | UCHPO(adr,1)))
#define UNPACK_L16(adr)	((UINT16)(UCHPO(adr,1) << 8 | UCHP(adr)))

#define PACK_16(adr,val) 	((HOST_BYTE_ORDER == BIG_ENDIAN)	? (PACK_B16 (adr,val))	: (PACK_L16 (adr,val)))



#define PACK_B16(adr,val)	(UCHP(adr)    = ((val)>>8 )&0xff, UCHPO(adr,1) =  (val)     &0xff)

#define PACK_L16(adr,val)	(UCHPO(adr,1) = ((val)>>8 )&0xff, UCHP(adr)    =  (val)     &0xff)



#define UNPACK_32(adr)	((HOST_BYTE_ORDER == BIG_ENDIAN) ? (UNPACK_B32 (adr)) : (UNPACK_L32 (adr)))



#define UNPACK_B32(adr)	((UINT32)(UCHP(adr)    << 24 | UCHPO(adr,1) << 16 | UCHPO(adr,2) << 8  | UCHPO(adr,3)))





#define UNPACK_L32(adr)	((UINT32)(UCHPO(adr,3) << 24 | UCHPO(adr,2) << 16 | UCHPO(adr,1) << 8  | UCHP(adr)))




#define PACK_32(adr,val) 	((HOST_BYTE_ORDER == BIG_ENDIAN)	? (PACK_B32 (adr,val))	: (PACK_L32 (adr,val)))



#define PACK_B32(adr,val)	(UCHP(adr)     = ((val)>>24)&0xff, UCHPO(adr,1)  = ((val)>>16)&0xff, UCHPO(adr,2)  = ((val)>>8) &0xff, UCHPO(adr,3)  =  (val)     &0xff)




#define PACK_L32(adr,val)	(UCHPO(adr,3)  = ((val)>>24)&0xff, UCHPO(adr,2)  = ((val)>>16)&0xff, UCHPO(adr,1)  = ((val)>>8) &0xff, UCHP(adr)     =  (val)     &0xff)




/* byte offset of member in structure*/#define OFFSET(structure, member)	((int) &(((structure *) 0) -> member))


/* size of a member of a structure */#define MEMBER_SIZE(structure, member)	(sizeof (((structure *) 0) -> member))


/* number of elements in an array */#define NELEMENTS(array)	(sizeof (array) / sizeof ((array) [0]))


#define FOREVER	for (;;)

/* macro to check if alignment is a power of 2 */

#define CHECK_2_ALIGN(x)	(((x) & ((x) - 1)) == 0)



#define max(x, y)	(((x) < (y)) ? (y) : (x))



#define min(x, y)	(((x) < (y)) ? (x) : (y))




/* SUN4_SOLARIS2 host specific defines and includes */

# 481 "/pMaster/tornado-1.01/host/include/host.h"


/* WIN32 host specific defines and includes */

# 553 "/pMaster/tornado-1.01/host/include/host.h"


/* return status values */


#define OK		0


/*
 * SPR# 7297 - Check if ERROR is externally defined to
 * avoid clash with Microsoft's definition.
 */







#define ERROR (-1)

#define WTX_OK		0
#define WTX_ERROR	(-1)


# 50 "/pMaster/tornado-1.01/host/include/wtxtypes.h" 2

# 59 "/pMaster/tornado-1.01/host/include/wtxtypes.h"


# 1 "/pMaster/tornado-1.01/host/include/wtxerr.h" 1
/* wtxerr.h - wtx error header file */

/* Copyright 1984-1996 Wind River Systems, Inc. */

/*
modification history
--------------------
01w,03mar97,wmd  added comment to alert that corresponding changes must also
		 be made in resource/tcl/wtxerrdb.tcl.
01v,28feb97,wmd  added WTX_ERR_SVR_INVALID_LICENSE.
01u,30sep96,elp  put in share/src/wtx (SPR# 6775).
01t,11sep96,pad  added WTX_ERR_LOADER_MAX_MODULES_LOADED (SPR #7133).
01s,15may96,pad  added WTX_ERR_LOADER_SYMBOL_NOT_FROM_SDA_SECTION.
01r,26mar96,pad  added WTX_ERR_LOADER_RELOCATION_OFFSET_TOO_LARGE.
01q,17jan96,p_m  added WTX_ERR_SYMTBL_SYMBOL_NAME_TOO_LONG.
01p,16oct95,pad  added WTX_ERR_SVR_CANT_CONNECT_LICENSE_DAEMON.
01o,31aug95,pad  added WTX_ERR_LOADER_OBJ_MODULE_NOT_APPROPRIATE (SPR #4533).
		 Fixed WTX_ERR_AGENT_MEM_ACCESS_ERROR.
01n,12jul95,pad  added WTX_ERR_LOADER_CANT_ATTACH_OMF_MANAGER.
01m,11jun95,p_m  added WTX_ERR_SVR_TARGET_UNKNOWN and
		 WTX_ERR_SVR_INVALID_DEVICE.
01l,09jun95,p_m  added WTX_ERR_AGENT_PATTERN_NOT_FOUND.
01k,01jun95,c_s  added AGENT_GOPHER_SYNTAX error.
01j,22may95,jcf  name revision.
01i,19may95,p_m  added WTX_ERR_NO_VIO_CHANNEL
          + tpr  changed WTX_ERR_AGENT_XXX name following new WDB error code.
01h,17may95,s_w  changed exchange and C API errors
01g,11may95,pas  added WTX_ERR_SYMTBL_NO_SUCH_MODULE
01f,04may95,s_w  added errors for C API and exchange errors and WTX_ERR_LAST
01e,29mar95,p_m  added agent errors.
01d,01mar95,pad  added error code for OBJ_XXX stuff.
01c,23feb95,p_m  made all _TGT_SVR_ errors be _SVR_.  leave unused numbers
		 between error classes.
		 changed _WPWRD_ errors to _REGISTRY_.
01b,21feb95,pad  added error codes for DLL and WTX service addition.
01a,15feb95,p_m  written.
*/


#define __INCwtxerrh 1

#define WTX_ERR_NONE                  0

/************************************************************************
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

 NOTE:  Any additions or deletions to this file must be accompanied by
	modifications in the file ../resource/tcl/wtxerrdb.tcl!

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
*/

/* wtx status codes */

#define WTXERR_BASE_NUM		0x10000

typedef enum wtx_error_t
    {
    /* Target Server Errors */

    WTX_ERR_SVR_TARGET_NOT_ATTACHED           = (0x10000  | 1),
    WTX_ERR_SVR_INVALID_EVENTPOINT            = (0x10000  | 2),
    WTX_ERR_SVR_FILE_NOT_FOUND                = (0x10000  | 3),
    WTX_ERR_SVR_INVALID_FIND_REQUEST          = (0x10000  | 4),
    WTX_ERR_SVR_INVALID_FLAGS                 = (0x10000  | 5),
    WTX_ERR_SVR_INVALID_FILE_DESCRIPTOR       = (0x10000  | 6),
    WTX_ERR_SVR_EINVAL                        = (0x10000  | 7),
    WTX_ERR_SVR_CANT_START_CONSOLE            = (0x10000  | 8),
    WTX_ERR_SVR_INVALID_CONSOLE               = (0x10000  | 9),
    WTX_ERR_SVR_NO_SCALABLE_AGENT             = (0x10000  | 10),
    WTX_ERR_SVR_CANT_ADD_WTX_SERVICE	      = (0x10000  | 11),
    WTX_ERR_SVR_NO_VIO_CHANNEL                = (0x10000  | 12),

    /* Common Server Errors */

    WTX_ERR_SVR_NOT_ENOUGH_MEMORY             = (0x10000  | 20),
    WTX_ERR_SVR_ACCESS_DENIED                 = (0x10000  | 21),
    WTX_ERR_SVR_WIND_BASE_NOT_SET             = (0x10000  | 22),
    WTX_ERR_SVR_SERVICE_NOT_AVAILABLE         = (0x10000  | 23),
    WTX_ERR_SVR_INVALID_CLIENT_ID             = (0x10000  | 24),
    WTX_ERR_SVR_CLIENT_NOT_ATTACHED           = (0x10000  | 25),
    WTX_ERR_SVR_TARGET_UNKNOWN                = (0x10000  | 26),
    WTX_ERR_SVR_INVALID_DEVICE                = (0x10000  | 27),
    WTX_ERR_SVR_CANT_CONNECT_LICENSE_DAEMON   = (0x10000  | 28),
    WTX_ERR_SVR_INVALID_LICENSE               = (0x10000  | 29),

    /* Registry Errors */

    WTX_ERR_REGISTRY_NAME_NOT_FOUND           = (0x10000  | 30),
    WTX_ERR_REGISTRY_BAD_PATTERN              = (0x10000  | 31),
    WTX_ERR_REGISTRY_NAME_CLASH               = (0x10000  | 32),

    /* Object Module Management Errors */

    WTX_ERR_LOADER_TEXT_IN_USE                = (0x10000  | 40),
    WTX_ERR_LOADER_ILLEGAL_FLAGS_COMBINATION  = (0x10000  | 41),
    WTX_ERR_LOADER_NO_RELOCATION_ROUTINE      = (0x10000  | 42),
    WTX_ERR_LOADER_CANT_GET_SEGMENT_ADDRESSES = (0x10000  | 43),
    WTX_ERR_LOADER_UNKNOWN_RELOCATION_ENTRY   = (0x10000  | 44),
    WTX_ERR_LOADER_UNKNOWN_COMMAND_FLAG       = (0x10000  | 45),
    WTX_ERR_LOADER_UNKNOWN_OBJ_MODULE_FORMAT  = (0x10000  | 46),
    WTX_ERR_LOADER_NULL_SIZE_OBJ_MODULE       = (0x10000  | 47),
    WTX_ERR_LOADER_OBJ_MODULE_NOT_FOUND       = (0x10000  | 48),
    WTX_ERR_LOADER_BAD_CHECKSUM               = (0x10000  | 49),
    WTX_ERR_LOADER_CANT_ATTACH_OMF_MANAGER    = (0x10000  | 50),
    WTX_ERR_LOADER_OBJ_MODULE_NOT_APPROPRIATE = (0x10000  | 51),
    WTX_ERR_LOADER_RELOCATION_OFFSET_TOO_LARGE= (0x10000  | 52),
    WTX_ERR_LOADER_SYMBOL_NOT_FROM_SDA_SECTION= (0x10000  | 53),
    WTX_ERR_LOADER_MAX_MODULES_LOADED	      = (0x10000  | 54),
    WTX_ERR_LOADER_RELOCATION_ERROR           = (0x10000  | 55),

    /* Symbol Management Errors */

    WTX_ERR_SYMTBL_INVALID_SYMTBL             = (0x10000  | 60),
    WTX_ERR_SYMTBL_SYMBOL_NOT_FOUND           = (0x10000  | 61),
    WTX_ERR_SYMTBL_TABLE_NOT_EMPTY            = (0x10000  | 62),
    WTX_ERR_SYMTBL_NAME_CLASH                 = (0x10000  | 63),
    WTX_ERR_SYMTBL_NO_SUCH_MODULE             = (0x10000  | 64),
    WTX_ERR_SYMTBL_SYMBOL_NAME_TOO_LONG       = (0x10000  | 65),

    /* Target Memory Management Errors */

    WTX_ERR_TGTMEM_NOT_ENOUGH_MEMORY          = (0x10000  | 70),
    WTX_ERR_TGTMEM_INVALID_POOL_SIZE          = (0x10000  | 71),
    WTX_ERR_TGTMEM_INVALID_BLOCK              = (0x10000  | 72),
    WTX_ERR_TGTMEM_PAGE_SIZE_UNAVAILABLE      = (0x10000  | 73),
    WTX_ERR_TGTMEM_BLOCK_CONFLICT             = (0x10000  | 74),
    WTX_ERR_TGTMEM_CANT_UNMAP_UNKNOWN_BLOCK   = (0x10000  | 75),
    WTX_ERR_TGTMEM_UNMAPPED_MEMORY            = (0x10000  | 76),

    /* generic DLL error codes */

    WTX_ERR_DLL_CANT_OPEN_SHARED_FILE         = (0x10000  | 100),
    WTX_ERR_DLL_CANT_BIND_FUNCTION            = (0x10000  | 101),
    WTX_ERR_DLL_CANT_CLOSE_SHARED_FILE        = (0x10000  | 102),

    /* Internal object error codes */

    WTX_ERR_OBJ_INVALID_OBJECT                = (0x10000  | 110),

    /* Agent error codes */

    WTX_ERR_AGENT_UNSUPPORTED_REQUEST         = (0x10000  | 200),
    WTX_ERR_AGENT_INVALID_PARAMS              = (0x10000  | 201),
    WTX_ERR_AGENT_MEM_ACCESS_ERROR            = (0x10000  | 202),
    WTX_ERR_AGENT_AGENT_MODE_ERROR            = (0x10000  | 203),
    WTX_ERR_AGENT_RT_ERROR                    = (0x10000  | 204),
    WTX_ERR_AGENT_INVALID_CONTEXT             = (0x10000  | 205),
    WTX_ERR_AGENT_INVALID_VIO_CHANNEL         = (0x10000  | 206),
    WTX_ERR_AGENT_INVALID_EVENT               = (0x10000  | 207),
    WTX_ERR_AGENT_INVALID_EVENTPOINT          = (0x10000  | 208),
    WTX_ERR_AGENT_GOPHER_FAULT                = (0x10000  | 209),
    WTX_ERR_AGENT_GOPHER_TRUNCATED            = (0x10000  | 210),

    WTX_ERR_AGENT_EVENTPOINT_TABLE_FULL       = (0x10000  | 211),
    WTX_ERR_AGENT_NO_AGENT_PROC               = (0x10000  | 212),
    WTX_ERR_AGENT_NO_RT_PROC                  = (0x10000  | 213),
    WTX_ERR_AGENT_PROC_FAILED                 = (0x10000  | 214),
    WTX_ERR_AGENT_PATTERN_NOT_FOUND           = (0x10000  | 215),

    WTX_ERR_AGENT_NO_CONNECTION               = (0x10000  | 220),
    WTX_ERR_AGENT_CONNECTION_BUSY             = (0x10000  | 221),
    WTX_ERR_AGENT_COMMUNICATION_ERROR         = (0x10000  | 222),
    WTX_ERR_AGENT_GOPHER_SYNTAX	              = (0x10000  | 223),

    /* WTX C API error codes */

    WTX_ERR_API				      = (0x10000  | 300),
    WTX_ERR_API_MEMALLOC		      = (0x10000  | 301),
    WTX_ERR_API_HANDLER_NOT_FOUND	      = (0x10000  | 302),
    WTX_ERR_API_NOT_CONNECTED		      = (0x10000  | 303),
    WTX_ERR_API_INVALID_ARG		      = (0x10000  | 304),
    WTX_ERR_API_SERVER_NOT_FOUND	      = (0x10000  | 305),
    WTX_ERR_API_ALREADY_CONNECTED	      = (0x10000  | 306),
    WTX_ERR_API_AMBIGUOUS_SERVER_NAME	      = (0x10000  | 307),
    WTX_ERR_API_REGS_GET_PARTIAL_READ	      = (0x10000  | 308),
    WTX_ERR_API_INVALID_HANDLE		      = (0x10000  | 309),
    WTX_ERR_API_REGISTRY_UNREACHABLE	      = (0x10000  | 310),
    WTX_ERR_API_SERVICE_NOT_REGISTERED	      = (0x10000  | 311),
    WTX_ERR_API_SERVICE_ALREADY_REGISTERED    = (0x10000  | 312),
    WTX_ERR_API_TOOL_DISCONNECTED	      = (0x10000  | 313),
    WTX_ERR_API_REQUEST_FAILED		      = (0x10000  | 314),
    WTX_ERR_API_REQUEST_TIMED_OUT	      = (0x10000  | 315),

    /* WTX Exchange Error Codes */

    WTX_ERR_EXCHANGE                          = (0x10000  | 400),
    WTX_ERR_EXCHANGE_INVALID_HANDLE           = (0x10000  | 401),
    WTX_ERR_EXCHANGE_DATA                     = (0x10000  | 402),
    WTX_ERR_EXCHANGE_MEMALLOC		      = (0x10000  | 403),
    WTX_ERR_EXCHANGE_NO_SERVER		      = (0x10000  | 404),
    WTX_ERR_EXCHANGE_INVALID_ARG	      = (0x10000  | 405),
    WTX_ERR_EXCHANGE_MARSHALPTR	              = (0x10000  | 406),
    WTX_ERR_EXCHANGE_TIMEOUT                  = (0x10000  | 407),
    WTX_ERR_EXCHANGE_BAD_KEY		      = (0x10000  | 408),
    WTX_ERR_EXCHANGE_REQUEST_UNSUPPORTED      = (0x10000  | 409),
    WTX_ERR_EXCHANGE_TRANSPORT_UNSUPPORTED    = (0x10000  | 410),
    WTX_ERR_EXCHANGE_TRANSPORT_ERROR	      = (0x10000  | 411),
    WTX_ERR_EXCHANGE_TRANSPORT_DISCONNECT     = (0x10000  | 412),
    WTX_ERR_EXCHANGE_NO_TRANSPORT	      = (0x10000  | 413),

    WTX_ERR_LAST			      = (0x10000  | 0x0FFFF)

    } WTX_ERROR_T;


# 61 "/pMaster/tornado-1.01/host/include/wtxtypes.h" 2


/* limits */

#define WTX_MAX_SYM_CNT		256
#define WTX_MAX_EVTPT_CNT	256
#define WTX_MAX_MODULE_CNT	1000
#define WTX_MAX_SERVICE_CNT	500
#define WTX_MAX_ARG_CNT		10
#define WTX_MAX_SYM_TBL_CNT	256
#define WTX_MAX_VIO_DATA	512
					/* this number should be the same */
					/* as the buffer size used on WDB */
					/* virtual I/O devices */
#define WTX_MAX_PATTERN_LEN	512
					/* WTX_MEM_SCAN service */
#define WTX_MAX_FILENAME_LEN	80
#define WTX_MAX_OBJ_SEG_CNT	40
#define WTX_MAX_SECTION_CNT	40
					/* object file */

#define WTX_MAX_WDB_SVC_CNT	10
					/* WDB service object module */

/* virtual i/o control operations */

#define WTX_CTL_VIO_REDIRECT	1

/* object kill operations */

#define WTX_OBJ_KILL_DESTROY		1
#define WTX_OBJ_KILL_RESTART		2

/* typedefs */

typedef long		BOOL32;		/* boolean */

typedef unsigned long	WTX_STATUS;	/* wtx status value */
typedef unsigned long 	WTX_REQUEST;	/* WTX request number */

/*
 * WTX_EVENT_TYPE - The class of events that can be generated by the
 * target server. User defined event types start at 0x100, event types
 * numbered 19 through 255 are reserved for future use.
 */

typedef enum wtx_event_type
    {
    WTX_EVENT_NONE = 0,		/* No event */
    WTX_EVENT_CTX_START = 1,	/* A target context was created */
    WTX_EVENT_CTX_EXIT = 2,	/* A target context was deleted */
    WTX_EVENT_TEXT_ACCESS = 3,	/* A target text access (breakpoint) */
    WTX_EVENT_DATA_ACCESS = 4,	/* A target data access (watchpoint) */
    WTX_EVENT_EXCEPTION = 5,	/* A target exception occurred */
    WTX_EVENT_VIO_WRITE = 6,	/* A target VIO write occurred */
    WTX_EVENT_BREAKPOINT = 7,	/* A target breakpoint: obsolete, use */
				/* WTX_EVENT_TEXT_ACCESS instead */
    WTX_EVENT_CALL_RETURN = 8,	/* A target function call returned */
    WTX_EVENT_USER = 9,		/* A target agent user defined event */
    WTX_EVENT_UNKNOWN = 10,	/* An unknown target event */
    WTX_EVENT_TGT_RESET = 11,	/* The target was reset */
    WTX_EVENT_SYM_ADDED = 12,	/* A symbol added to the sym. table */
    WTX_EVENT_SYM_REMOVED = 13,	/* A symbol removed from the sym. table */
    WTX_EVENT_OBJ_LOADED = 14,	/* An object file was loaded */
    WTX_EVENT_OBJ_UNLOADED = 15,/* An object file was unloaded */
    WTX_EVENT_TOOL_ATTACH = 16,	/* A tool attached to Target Server */
    WTX_EVENT_TOOL_DETACH = 17,	/* A tool detached from Target Server */
    WTX_EVENT_TOOL_MSG = 18,	/* A tool to tool message */
    WTX_EVENT_OTHER = 0x100,	/* User defined or unrecognized event */
    WTX_EVENT_INVALID = (-1)  /* Invalid/unidentifiable event */
    } WTX_EVENT_TYPE;

typedef enum wtx_context_type		/* types of context */
    {
    WTX_CONTEXT_SYSTEM		= 0,	/* system mode */
    WTX_CONTEXT_GROUP		= 1,	/* process group */
    WTX_CONTEXT_ANY		= 2,	/* any context */
    WTX_CONTEXT_TASK		= 3,	/* specific task or processes */
    WTX_CONTEXT_ANY_TASK	= 4,	/* any task */
    WTX_CONTEXT_ISR		= 5,	/* specific ISR */
    WTX_CONTEXT_ISR_ANY		= 6	/* any ISR */
    } WTX_CONTEXT_TYPE;

typedef TGT_ADDR_T WTX_CONTEXT_ID_T;	/* context id type */

/*
 * WTX_ACTION_TYPE - Type of actions to perform when an event occurs.
 * These action types can be bit-wise or-ed together. If the function called
 * in an WTX_ACTION_CALL returns TRUE, then any other actions specified are
 * cancelled. User defined actions use the high order 16 bits of the
 * WTX_ACTION_TYPE.
 */

typedef enum wtx_action_type		/* type of actions */
    {
    WTX_ACTION_CALL 	= 1,		/* Call a function */
    WTX_ACTION_NOTIFY	= 2,		/* Post the event to the host */
    WTX_ACTION_STOP	= 4,		/* Stop the context */
    WTX_ACTION_STOP_ALL	= 8		/* Stop the system */
    } WTX_ACTION_TYPE;

typedef enum wtx_return_type		/* return value type */
    {
    WTX_RETURN_TYPE_INT     = 0,	/* integer return format */
    WTX_RETURN_TYPE_DOUBLE  = 1		/* double return format */
    } WTX_RETURN_TYPE;

typedef enum wtx_reg_set_type		/* types of registers */
    {
    WTX_REG_SET_IU	= 0,		/* integer unit reg. set */
    WTX_REG_SET_FPU	= 1,		/* float. point unit reg. set */
    WTX_REG_SET_MMU	= 2,		/* memory managmt unit reg set */
    WTX_REG_SET_CU	= 3,		/* cache unit reg. set */
    WTX_REG_SET_TPU	= 4,		/* time process. unit reg. set */
    WTX_REG_SET_SYS	= 5		/* system registers */
    } WTX_REG_SET_TYPE;

typedef enum wtx_agent_mode_type	/* debug agent running mode */
    {
    WTX_AGENT_MODE_TASK 	= 1,	/* run in task mode */
    WTX_AGENT_MODE_EXTERN	= 2,	/* run in system mode */
    WTX_AGENT_MODE_BI		= 3	/* bimodal agent */
    } WTX_AGENT_MODE_TYPE;

typedef enum wtx_open_flag		/* flag for WTX_OPEN */
    {
    WTX_O_RDONLY 	= 0x1000,	/* Open for reading only */
    WTX_O_WRONLY	= 0x1001,	/* Open for writing only */
    WTX_O_CREAT		= 0x1400	/* Open with file create */
    } WTX_OPEN_FLAG;

typedef struct wtx_core			/* WTX message core */
    {
    UINT32       objId;			/* identifier */
    WTX_ERROR_T  errCode;		/* service error code */
    UINT32       protVersion;		/* WTX protocol version */
    } WTX_CORE;

typedef struct wtx_desc			/* server descriptor */
    {
    char *		wpwrName;	/* name of wpwr service */
    char *		wpwrType;	/* type of service */
    char *		wpwrKey;	/* unique service key */
    } WTX_DESC;

typedef struct wtx_desc_q		/* server descriptor queue */
    {
    char *		wpwrName;	/* name of wpwr service */
    char *		wpwrType;	/* type of service */
    char *		wpwrKey;	/* unique service key */
    struct wtx_desc_q *	pNext;		/* next descriptor */
    } WTX_DESC_Q;






# 93 "/pMaster/tornado-1.01/host/include/wtx.h" 2

# 1 "/pMaster/tornado-1.01/host/include/wtxmsg.h" 1
/* wtxmsg.h - WTX message definition */

/* Copyright 1984-1996 Wind River Systems, Inc. */

/*
modification history
--------------------
02l,06dec96,dgp  doc: correct spelling
02k,30sep96,elp  put in share/, added WTX_OBJ_MODULE_UNDEF_SYM_ADD (SPR# 6775).
02j,17jun96,p_m	  changed flags type in WTX_MSG_OPEN_DESC (SPR# 4941).
02i,10jun96,elp	  re-installed WTX_MSG_SYM_TBL_INFO type to prevent
		  compatibility problems.
02h,20may96,elp	  added WTX_SYM_TBL_INFO type (SPR# 6502).
02g,25oct95,p_m   added WTX_AGENT_MODE_GET service (SPR# 5231) and
		  WTX_DIRECT_CALL.
02f,17jul95,p_m   cleaned comments for manual generation.
02d,06jun95,p_m   replaced moduleNameOrId in WTX_MSG_SYM_MATCH_DESC by an union.
02c,01jun95,p_m   removed WTX_MSG_CALL_PARAM. added returnType and pReserved
		  and replaced isText by contextType in WTX_MSG_CONTEXT_DESC.
02b,30may95,p_m   completed WTX_MEM_SCAN and WTX_MEM_MOVE implementation.
02a,26may95,p_m   added match field in WTX_MSG_MEM_SCAN_DESC.
01z,23may95,p_m   made missing name changes.
01y,22may95,jcf   name revision.
01x,18may95,p_m   added WTX_VIO_CHAN_GET and WTX_VIO_CHAN_RELEASE.
                  removed DETECTION in enventpoint.
01w,16may95,p_m   added WTX_MSG_KILL_DESC and WTX_TARGET_ATTACH.
01v,10may95,pad   modified WTX_MSG_SYM_LIST and WTX_MSG_SYM_MATCH_DESC to get
		  defined or unknown symbols associated with a module.
01u,09may95,p_m   added wtxregd related messages. added Target Server version
		  in WTX_MSG_TS_INFO.
01t,04may95,s_w   Put in WTX_xxx message numbers previously in private/wtxp.h
01s,02may95,pad   changed WTX_MSG_MODULE_INFO format field from UINT32 to char *
01r,04apr95,p_m   fixed WTX_MSG_CONTEXT_DESC.stackBase comment.
01q,29mar95,p_m   added comments. removed #include "comtypes.h".
		  changed addr type in OBJ_SEGMENT to TGT_ADDR_T.
01p,28mar95,p_m   took care of comments line length for manual generation.
01o,24mar95,p_m   changed addr type in LD_M_SECTION to TGT_ADDR_T.
01n,19mar95,c_s   updated gopher structures.
01m,20mar95,f_v   fix few syntax error to work with mgtools
01l,16mar95,p_m   added WTX_MSG_VIO_FILE_LIST.
01k,15mar95,p_m   changed #include "vxWorks.h" to #include "host.h".
01j,10mar95,p_m	  made endian field a UINT32.
01i,03mar95,p_m	  replaced WRAPSTRING by char *.
		  added gopher structure for WTX.
01h,27feb95,p_m	  cleanup up WTX_MSG_MEM_SCAN_DESC.
		  added symTblId to WTX_MSG_SYM_TBL_INFO.
		  simplified WTX_WDB_SERVICE_DESC.
01g,25feb95,jcf	  extended WTX_TS_INFO.  converted spaces to tabs.
01f,20feb95,pad	  added WTX_WTX_SERVICE_DESC type. Modified type
		  WTX_MSG_SERVICE_DESC.
01e,09feb95,p_m	  renamed structures for more coherency.
		  get rid of structures shared with WDB.
		  added comments and cleanup.
01d,08feb95,p_m	  added loadFlag in WTX_MODULE_INFO.
01c,30jan95,p_m	  added additional routines and filenames in SERVICE_DESC.
		  changed rtnObjFile to svcObjFile in SERVICE_DESC.
		  added WTX_MEM_XFER; added WTX_MEM_SET_DESC;
		  added WTX_REG_WRITE;
01b,22jan95,p_m	  added TOOL_DESC field in WTX_TS_INFO.
		  replaced #include "wdb/wdbtypes.h" by #include "wdbtypes.h".
		  replaced rtnName with initRtnName in SERVICE_DESC.
01a,20jan95,p_m	  written.
*/


#define __INCwtxmsgh












/* WTX requests */

#define	WTX_TOOL_ATTACH		1
#define	WTX_TOOL_DETACH		2
#define	WTX_TS_INFO_GET		3
#define	WTX_TARGET_RESET	4
#define	WTX_TS_LOCK		5
#define	WTX_TS_UNLOCK		6
#define	WTX_TARGET_ATTACH	7

#define	WTX_CONTEXT_CREATE	10
#define	WTX_CONTEXT_KILL	11
#define	WTX_CONTEXT_SUSPEND	12
#define	WTX_CONTEXT_CONT	13
#define	WTX_CONTEXT_RESUME	14
#define	WTX_CONTEXT_STEP	15

#define	WTX_EVENTPOINT_ADD	20
#define	WTX_EVENTPOINT_DELETE	21
#define	WTX_EVENTPOINT_LIST	22

#define	WTX_MEM_CHECKSUM	30
#define	WTX_MEM_READ		31
#define	WTX_MEM_WRITE		32
#define	WTX_MEM_SET		33
#define	WTX_MEM_SCAN		34
#define	WTX_MEM_MOVE		35
#define	WTX_MEM_ALLOC		36
#define	WTX_MEM_FREE		37
#define	WTX_MEM_INFO_GET	38
#define	WTX_MEM_ALIGN		39
#define	WTX_MEM_REALLOC		40
#define	WTX_MEM_ADD_TO_POOL	41

#define	WTX_REGS_GET		50
#define	WTX_REGS_SET		51

#define	WTX_OPEN		60
#define	WTX_VIO_READ		61
#define	WTX_VIO_WRITE		62
#define	WTX_CLOSE		63
#define	WTX_VIO_CTL		64
#define	WTX_VIO_FILE_LIST	65
#define	WTX_VIO_CHAN_GET	66
#define	WTX_VIO_CHAN_RELEASE	67

#define	WTX_OBJ_MODULE_LOAD		70
#define	WTX_OBJ_MODULE_UNLOAD		71
#define	WTX_OBJ_MODULE_LIST		72
#define	WTX_OBJ_MODULE_INFO_GET		73
#define	WTX_OBJ_MODULE_FIND		74
#define WTX_OBJ_MODULE_UNDEF_SYM_ADD	75

#define	WTX_SYM_TBL_CREATE	80
#define	WTX_SYM_TBL_DELETE	81
#define	WTX_SYM_TBL_LIST_GET	82
#define	WTX_SYM_LIST_GET	83
#define	WTX_SYM_TBL_INFO_GET	84
#define	WTX_SYM_FIND		85
#define	WTX_SYM_ADD		86
#define	WTX_SYM_REMOVE		87

#define	WTX_EVENT_GET		100
#define	WTX_REGISTER_FOR_EVENT	101
#define	WTX_UN_REGIS_FOR_EVENT	102
#define	WTX_EVENT_ADD		103

#define	WTX_GOPHER_EVAL		110
#define	WTX_FUNC_CALL		111
#define	WTX_SERVICE_ADD		112
#define	WTX_WTX_SERVICE_LIST	113
#define	WTX_WDB_SERVICE_LIST	114
#define	WTX_CONSOLE_CREATE	115
#define	WTX_CONSOLE_KILL	116
#define	WTX_AGENT_MODE_SET	117
#define	WTX_AGENT_MODE_GET	118
#define	WTX_DIRECT_CALL		119

#define	WTX_OBJ_KILL		120
#define	WTX_OBJ_RESTART		121

#define WTX_REGISTER		201
#define WTX_UNREGISTER		202
#define WTX_INFO_GET		203
#define WTX_INFO_Q_GET		204

/* typedefs */

typedef enum wtx_value_t	/* simple types definitions */
    {
    V_INT8		= 0,	/* 8  bit signed integer */
    V_INT16		= 1,	/* 16 bit signed integer */
    V_INT32		= 2,	/* 32 bit signed integer */
    V_UINT8		= 3,	/* 8  bit unsigned integer */
    V_UINT16		= 4,	/* 16 bit unsigned integer */
    V_UINT32		= 5,	/* 32 bit unsigned integer */
    V_DOUBLE		= 6,	/* double floating point */
    V_BOOL32		= 7,	/* 32 bit boolean */
    V_PCHAR		= 8,	/* character pointer */
    V_PVOID		= 9,	/* void pointer */
    V_TGT_ADDR		= 10,	/* target address */
    V_TGT_ARG		= 11	/* target task argument */
    } WTX_VALUE_T;

typedef struct wtx_value		/* simple type value */
    {
    WTX_VALUE_T valueType;		/* value type */
    union
	{
	INT8		v_int8;		/* 8  bit signed value */
	INT16		v_int16;	/* 16 bit signed value */
	INT32		v_int32;	/* 32 bit signed value */
	UINT8		v_uint8;	/* 8  bit unsigned value */
	UINT16		v_uint16;	/* 16 bit unsigned value */
	UINT32		v_uint32;	/* 32 bit unsigned value */
	double		v_double;	/* double value */
	BOOL32		v_bool32;	/* 32 bit boolean value */
	char *		v_pchar;	/* string value */
	void *		v_pvoid;	/* void pointer value */
	TGT_ADDR_T	v_tgt_addr;	/* target address value */
	TGT_ARG_T	v_tgt_arg;	/* target task arg. value */
	} value_u;
    } WTX_VALUE;

typedef struct wtx_msg_result		/* simple request result */
    {
    WTX_CORE		wtxCore;	/* WTX message core */

    WTX_VALUE		val;		/* result value of call */
    } WTX_MSG_RESULT;

typedef struct wtx_msg_param		/* simple request parameter */
    {
    WTX_CORE		wtxCore;	/* WTX message core */

    WTX_VALUE		param;		/* param value of call */
    } WTX_MSG_PARAM;

typedef struct wtx_mem_region		/* memory region desc. */
    {
    TGT_ADDR_T		baseAddr;	/* mem. region base address */
    UINT32		size;		/* mem. region size */
    UINT32		attribute;	/* mem. region attributes */
    } WTX_MEM_REGION;

typedef struct wtx_rt_info		/* target runtime info. */
    {
    UINT32		rtType;		/* runtime type */
    char *		rtVersion;	/* run time version */
    UINT32		cpuType;	/* target processor type */
    BOOL32		hasFpp;		/* floating point unit avail. */
    BOOL32		hasWriteProtect;/* text write protect avail. */
    UINT32		pageSize;	/* size of a page */
    UINT32		endian;		/* endianness (LITTLE or BIG) */
    char *		bspName;	/* board support package name */
    char *		bootline;	/* boot file name */
    TGT_ADDR_T		memBase;	/* target main mem. base addr. */
    UINT32		memSize;	/* target main mem. size */
    UINT32		numRegions;	/* number of mem. regions */
    WTX_MEM_REGION *	memRegion;	/* mem. region descriptor(s) */
    TGT_ADDR_T		hostPoolBase;	/* tgtsvr mem. pool */
    UINT32		hostPoolSize;	/* tgtsvr mem. pool size */
    } WTX_RT_INFO;

typedef struct wtx_agent_info		/* target agent information */
    {
    char *		agentVersion;	/* WDB agent version */
    UINT32		mtu;		/* max. transfer size (bytes) */
    UINT32		mode;		/* available agent modes */
    } WTX_AGENT_INFO;

typedef struct wtx_tgt_info		/* target information */
    {
    WTX_AGENT_INFO	agentInfo;	/* info on the agent */
    WTX_RT_INFO		rtInfo;		/* info on the run time system */
    } WTX_TGT_INFO;

typedef struct wtx_tgt_link_desc 	/* link descriptor */
    {
    char *		name;		/* target/host link name */
    UINT32		type;		/* target/host link type */
    UINT32		speed;		/* target/host link speed */
    } WTX_TGT_LINK_DESC;

typedef struct wtx_tool_desc		/* tool descriptor */
    {
    UINT32		id;		/* unique tool identifier */
    char *		toolName;	/* tool name */
    char *		toolArgv;	/* tool argv parameters */
    char *		toolVersion;	/* tool version */
    char *		userName;	/* user name */
    void *		pReserved;	/* reserved */
    struct wtx_tool_desc * next;	/* ptr to next tool desc. */
    } WTX_TOOL_DESC;

typedef WTX_TOOL_DESC * TOOL_ID;

typedef struct wtx_msg_ts_info		/* TS information message */
    {
    WTX_CORE		wtxCore;	/* WTX message core */

    WTX_TGT_LINK_DESC	tgtLinkDesc;	/* Target link descriptor */
    WTX_TGT_INFO	tgtInfo;	/* info obtained from Target */
    WTX_TOOL_DESC *	pWtxToolDesc;	/* info about attached Tools */
    char *		version;	/* Target Server version */
    char *		userName;	/* target server user name */
    char *		startTime;	/* target server start time */
    char *		accessTime;	/* target server access time */
    char *		lockMsg;	/* lock/authorization message */
    void *		pReserved;	/* reserved */
    } WTX_MSG_TS_INFO;

typedef struct wtx_msg_ts_lock		/* lock message */
    {
    WTX_CORE		wtxCore;	/* WTX message core */

    UINT32		lockType;	/* lock type to use */
    } WTX_MSG_TS_LOCK;

typedef struct wtx_msg_ts_unlock	/* unlock message */
    {
    WTX_CORE		wtxCore;	/* WTX message core */

    BOOL32		force;		/* force unlock type to use */
    } WTX_MSG_TS_UNLOCK;

typedef struct wtx_msg_tool_desc 	/* tool desc. message */
    {
    WTX_CORE		wtxCore;	/* WTX message core */

    WTX_TOOL_DESC	wtxToolDesc;	/* tool descriptor */
    } WTX_MSG_TOOL_DESC;

typedef struct wtx_msg_tool_id		/* tool identifier message */
    {
    WTX_CORE		wtxCore;	/* WTX message core */
    } WTX_MSG_TOOL_ID;

typedef struct wtx_msg_kill_desc	/* kill descriptor message */
    {
    WTX_CORE		wtxCore;	/* WTX message core */

    UINT32		request;	/* object kill flag */
    WTX_VALUE		arg;		/* object kill additional arg */
    } WTX_MSG_KILL_DESC;

typedef struct wtx_symbol		/* symbol desc. */
    {
    UINT32		status;		/* ret. val. for FIND request */
    UINT32		symTblId;	/* Symbol table id */
    char *		name;		/* Symbol name */
    BOOL32		exactName;	/* FALSE if _name is OK */
    TGT_ADDR_T		value;		/* Sym. value */
    UINT8		type;		/* Sym. type */
    UINT8		typeMask;	/* Sym. type mask for lookup */
    UINT16		group;		/* Sym. group */
    char *		moduleName;	/* module name */
    void *		pReserved;	/* reserved */
    struct wtx_symbol * next;		/* ptr to next symbol in list */
    } WTX_SYMBOL;

typedef struct wtx_msg_symbol_desc	/* symbol message */
    {
    WTX_CORE		wtxCore;	/* WTX message core */

    WTX_SYMBOL		symbol;		/* symbol */
    } WTX_MSG_SYMBOL_DESC;

typedef struct wtx_sym_list		/* symbol list */
    {
    WTX_SYMBOL *	pSymbol;	/* start of symbol list */
    } WTX_SYM_LIST;

typedef struct wtx_msg_sym_list		/* symbol list message */
    {
    WTX_CORE		wtxCore;	/* WTX message core */

    WTX_SYM_LIST 	symList;	/* symbol list */
    BOOL32              moreToCome;     /* TRUE if symbols are remaining */
    } WTX_MSG_SYM_LIST;

typedef struct wtx_msg_open_desc	/* file opening desc. */
    {
    WTX_CORE		wtxCore;	/* WTX message core */

    char *		filename;	/* filename */
    WTX_OPEN_FLAG	flags;		/* unix style open flags */
    INT32		mode;		/* unix style mode */
    INT32		channel;	/* channel id for redirection */
    } WTX_MSG_OPEN_DESC;

typedef struct wtx_msg_vio_ctl_desc	/* VIO control descriptor */
    {
    WTX_CORE		wtxCore; 	/* WTX message core */

    INT32		channel;	/* VIO channel number */
    UINT32		request;	/* control operation */
    UINT32		arg;		/* control argument */
    } WTX_MSG_VIO_CTL_DESC;

typedef struct wtx_msg_vio_copy_desc	/* virtual I/O data */
    {
    WTX_CORE		wtxCore; 	/* WTX message core */

    UINT32		channel;	/* virtual I/O channel */
    UINT32		maxBytes;	/* maximum bytes to transfer */
    void *		baseAddr;	/* base address of data */
    } WTX_MSG_VIO_COPY_DESC;

typedef struct wtx_vio_file_desc	/* virtual file descriptor */
    {
    char *	name;		/* file or device name */
    INT32	fd;		/* file descriptor */
    INT32	channel;	/* channel for redirection */
    INT32	fp;		/* file pointer for streams */
    INT32	type;		/* file type */
    INT32	mode;		/* open mode (O_RDONLY, O_WRONLY etc) */
    INT32	status;		/* open or closed */
    INT32	addlInfo;	/* additional info. (eg: process id) */
    struct wtx_vio_file_desc *	next; /* ptr to next desc. for list */
    } WTX_VIO_FILE_DESC;

typedef struct wtx_msg_vio_file_list	/* VIO files list message */
    {
    WTX_CORE		wtxCore; 	/* WTX message core */

    WTX_VIO_FILE_DESC * pVioFileList;	/* VIO file list */
    } WTX_MSG_VIO_FILE_LIST;

typedef struct ld_m_section		/* object module section desc. */
    {
    UINT32		flags;		/* SEC_LOAD, etc. */
    TGT_ADDR_T		addr;	  	/* section address */
    UINT32		length;		/* section length */
    } LD_M_SECTION;

typedef struct wtx_msg_ld_m_file_desc	/* object module file desc. */
    {
    WTX_CORE	   	wtxCore;	/* WTX message core */

    char *	   	filename;	/* object file name */
    INT32	   	loadFlag;	/* behavior control flags */
    UINT32	  	moduleId;	/* module identifier */
    UINT32	   	nSections;	/* number of sections */
    LD_M_SECTION * 	section;	/* section description */
    WTX_SYM_LIST   	undefSymList;	/* list of undefined symbols */
    } WTX_MSG_LD_M_FILE_DESC;

typedef struct wtx_msg_module_list	/* object module list */
    {
    WTX_CORE		wtxCore;	/* WTX message core */

    UINT32		numObjMod; 	/* number of module in list */
    UINT32 *	 	modIdList; 	/* list of object module id */
    } WTX_MSG_MODULE_LIST;

typedef struct obj_segment		/* object module segment */
    {
    UINT32		flags;		/* segment flags */
    TGT_ADDR_T		addr;		/* segment address */
    UINT32		length;		/* segment length */
    UINT32		reserved1;	/* reserved */
    UINT32		reserved2;	/* reserved */
    } OBJ_SEGMENT;

typedef struct wtx_msg_module_info	/* object module information */
    {
    WTX_CORE	  	wtxCore;	/* WTX message core */

    UINT32	  	moduleId;	/* module Id */
    char *	  	moduleName;	/* module name */
    char *	  	format;		/* object file format */
    UINT32	  	group;		/* group number */
    int		  	loadFlag;	/* flags used to load mod. */
    UINT32	  	nSegments;	/* number of segments */
    OBJ_SEGMENT *	segment;	/* segment description */
    void *	  	pReserved;	/* reserved */
    } WTX_MSG_MODULE_INFO;

typedef struct wtx_msg_mod_name_or_id	/* module name or identifier */
    {
    WTX_CORE		wtxCore;	/* WTX message core */

    UINT32		moduleId;	/* module Id */
    char *		filename;	/* module file name */
    } WTX_MSG_MOD_NAME_OR_ID;

typedef struct wtx_sym_tbl_info
    {
    UINT32		symTblId;	/* symbol table identifier */
    UINT32		symNum;		/* number of symbols */
    BOOL32		sameNameOk;	/* name clash policy */
    } WTX_SYM_TBL_INFO;

typedef struct wtx_msg_sym_tbl_info	/* symbol table information */
    {
    WTX_CORE		wtxCore;	/* WTX message core */

    UINT32		symTblId;	/* symbol table identifier */
    UINT32		symNum;		/* number of symbols */
    BOOL32		sameNameOk;	/* name clash policy */
    } WTX_MSG_SYM_TBL_INFO;

typedef struct wtx_msg_sym_match_desc	/* symbol lookup descriptor */
    {
    WTX_CORE		wtxCore;	/* WTX message core */

    UINT32		symTblId;	/* symbol table to look at */
    BOOL32		matchString;	/* match string if TRUE, look */
					/* around adrs if FALSE */
    TGT_ADDR_T		adrs;		/* addr. around which to look */
    char *		stringToMatch;	/* substring to match */

    BOOL32		byModuleName;	/* TRUE if module name is given */
    union
	{
	UINT32		moduleId;	/* module identifier */
	char *		moduleName;	/* or module name */
	} module;

    BOOL32              listUnknownSym; /* get unknown symbols if TRUE */
    BOOL32              giveMeNext;     /* TRUE for a follow-up req */
    } WTX_MSG_SYM_MATCH_DESC;

typedef struct wtx_event_desc		/* WTX event desc. */
    {
    char *		event;		/* event descriptor */
    INT32		addlDataLen;	/* additional data length */
    char *		addlData;	/* additional data (VIO) */
    } WTX_EVENT_DESC;

typedef struct wtx_msg_event_desc  	/* event message */
    {
    WTX_CORE		wtxCore;	/* WTX message core */

    WTX_EVENT_DESC	eventDesc;	/* event descriptor */
    } WTX_MSG_EVENT_DESC;

typedef struct wtx_msg_event_reg_desc	/* WTX event register desc. */
    {
    WTX_CORE		wtxCore;	/* WTX message core */

    char *		evtRegExp;	/* register event reg. expr. */
    } WTX_MSG_EVENT_REG_DESC;

typedef struct wtx_wdb_service_desc	/* WDB service descriptor */
    {
    UINT32		rpcNum;		/* RPC service number */
    char *		name;		/* service name */
    char *		svcObjFile;	/* module for new service */
    char *		initRtnName;	/* svc init. routine name */
    } WTX_WDB_SERVICE_DESC;

typedef struct wtx_wtx_service_desc	/* WTX service descriptor */
    {
    char *		svcObjFile;	/* xdr/service routines file */
    char *		svcProcName;	/* service procedure name */
    char *		inProcName;	/* input xdr procedure name */
    char *		outProcName;	/* output xdr procedure name */
    } WTX_WTX_SERVICE_DESC;

typedef struct wtx_msg_service_desc	/* protocol service desc. */
    {
    WTX_CORE		wtxCore;	/* WTX message core */

    WTX_WTX_SERVICE_DESC *pWtxServiceDesc; /* WTX service */
    WTX_WDB_SERVICE_DESC *pWdbServiceDesc; /* WDB service */
    } WTX_MSG_SERVICE_DESC;

typedef struct wtx_msg_service_list	/* protocol service list */
    {
    WTX_CORE		wtxCore;	/* WTX message core */

    UINT32		nServices;	/* num. of services in list */
    WTX_WDB_SERVICE_DESC *serviceDesc;	/* services list */
    } WTX_MSG_SERVICE_LIST;

typedef struct wtx_console_desc /* WTX Virtual console descriptor */
    {
    INT32		fdIn;		/* stdin for redirection */
    INT32		fdOut;		/* stdout for redirection */
    INT32		pid;		/* process identifier */
    char *		name;		/* console name */
    char *		display;	/* display name eg: host:0 */
    void *		pReserved;	/* reserved */
    } WTX_CONSOLE_DESC;

typedef struct wtx_msg_console_desc	/* WTX Virtual console desc. */
    {
    WTX_CORE		wtxCore;	/* WTX message core */

    WTX_CONSOLE_DESC	wtxConsDesc;	/* console desc */
    } WTX_MSG_CONSOLE_DESC;

typedef struct wtx_msg_mem_info	 	/* memory information */
    {
    WTX_CORE	wtxCore;		/* WTX message core */

    UINT32 	curBytesFree;		/* number of free bytes */
    UINT32 	curBytesAllocated;	/* cur. # of bytes alloc. */
    UINT32 	cumBytesAllocated;	/* cum. # of bytes alloc. */
    UINT32 	curBlocksFree;		/* cur. # of free blocks */
    UINT32 	curBlocksAlloc;		/* cur. # of blocks alloc. */
    UINT32 	cumBlocksAlloc;		/* cum. # of blocks alloc. */
    UINT32 	avgFreeBlockSize;	/* average free blocks size */
    UINT32 	avgAllocBlockSize;	/* average alloc. blocks size */
    UINT32 	cumAvgAllocBlockSize;	/* cum. avg alloc. block size */
    UINT32 	biggestBlockSize;	/* size of biggest block */
    void * 	pReserved;		/* reserved */
    } WTX_MSG_MEM_INFO;

typedef struct wtx_mem_xfer		/* memory transfer */
    {
    UINT32		numBytes;	/* num. of bytes to transfer */
    TGT_ADDR_T		destination;	/* destination address */
    char *		source;		/* source address */
    } WTX_MEM_XFER;

typedef struct wtx_msg_mem_xfer_desc	/* memory transfer message */
    {
    WTX_CORE		wtxCore;	/* WTX message core */

    WTX_MEM_XFER	memXfer;	/* mem. transfer desc. */
    } WTX_MSG_MEM_XFER_DESC;

typedef struct wtx_event		/* Target event */
    {
    WTX_EVENT_TYPE 	eventType;	/* type of event */
    TGT_ARG_T	   	eventArg;	/* event type dependent argument */
    } WTX_EVENT;

typedef struct wtx_context		/* context desc. */
    {
    WTX_CONTEXT_TYPE	contextType;	/* type of context */
    WTX_CONTEXT_ID_T	contextId;	/* context ID */
    } WTX_CONTEXT;

typedef struct wtx_action		/* action desc. */
    {
    WTX_ACTION_TYPE	actionType;	/* action type to perform */
    UINT32		actionArg;	/* action dependent argument */
    TGT_ADDR_T		callRtn;	/* function to ACTION_CALL */
    TGT_ARG_T		callArg;	/* function argument */
    } WTX_ACTION;

typedef struct wtx_msg_context		/* context message */
    {
    WTX_CORE		wtxCore;	/* WTX message core */

    WTX_CONTEXT_TYPE	contextType;	/* type of context */
    WTX_CONTEXT_ID_T	contextId;	/* context ID */
    } WTX_MSG_CONTEXT;

typedef struct wtx_evtpt		/* eventpoint desc. */
    {
    WTX_EVENT		event;		/* event to detect */
    WTX_CONTEXT		context;	/* context descriptor */
    WTX_ACTION		action;		/* action to perform */
    } WTX_EVTPT;

typedef struct wtx_msg_evtpt_desc	/* eventpoint message */
    {
    WTX_CORE		wtxCore;	/* WTX message core */

    WTX_EVTPT		wtxEvtpt;	/* eventpoint */
    } WTX_MSG_EVTPT_DESC;

typedef struct wtx_msg_evtpt_list  	/* eventpoint list message */
    {
    WTX_CORE		wtxCore;	/* WTX message core */

    UINT32		nEvtpt;		/* num. eventpoint in list */
    WTX_EVTPT *		pEvtpt;		/* eventpoint list */
    } WTX_MSG_EVTPT_LIST;

typedef struct wtx_msg_reg_write	/* register(s) to set */
    {
    WTX_CORE		wtxCore;	/* WTX message core */

    WTX_REG_SET_TYPE 	regSetType;	/* type of register set */
    WTX_CONTEXT	 	context;	/* associated context */
    WTX_MEM_XFER 	memXfer;	/* new value of register(s) */
    } WTX_MSG_REG_WRITE;

typedef struct WTX_MSG_REG_READ		/* register(s) to get */
    {
    WTX_CORE	    	wtxCore;	/* WTX message core */

    WTX_REG_SET_TYPE   	regSetType;	/* type of register set */
    WTX_CONTEXT	    	context;	/* associated context */
    WTX_MEM_REGION  	memRegion;	/* register block subregion */
    } WTX_MSG_REG_READ;

typedef struct wtx_msg_mem_block_desc	/* target memory block */
    {
    WTX_CORE		wtxCore;	/* WTX message core */

    TGT_ADDR_T		startAddr;	/* blocks starts from here */
    UINT32		numBytes;	/* number of bytes in block */
    } WTX_MSG_MEM_BLOCK_DESC;

typedef struct wtx_msg_mem_read_desc	/* target memory read desc. */
    {
    WTX_CORE		wtxCore;	/* WTX message core */

    TGT_ADDR_T		source;		/* source mem. address */
    UINT32		destination;	/* destination mem. address */
    UINT32		numBytes;	/* number of bytes to read */
    } WTX_MSG_MEM_READ_DESC;

typedef struct wtx_msg_mem_copy_desc	/* target memory copy desc. */
    {
    WTX_CORE		wtxCore;	/* WTX message core */

    UINT32		source;		/* encode from here */
    TGT_ADDR_T		destination;	/* decode to here */
    UINT32		numBytes;	/* bytes to copy/bytes copied */
    } WTX_MSG_MEM_COPY_DESC;

typedef struct wtx_msg_mem_scan_desc	/* target memory scan desc. */
    {
    WTX_CORE		wtxCore;	/* WTX message core */

    BOOL32		match;		/* TRUE for matching pattern */
    TGT_ADDR_T		startAddr;	/* start addr. for scanning */
    TGT_ADDR_T		endAddr;	/* end addr. for scanning */
    UINT32		numBytes;	/* number of bytes in pattern */
    void *		pattern;	/* byte pattern to look for */
    } WTX_MSG_MEM_SCAN_DESC;

typedef struct wtx_msg_mem_move_desc	/* target memory move desc. */
    {
    WTX_CORE		wtxCore;	/* WTX message core */

    TGT_ADDR_T		source;		/* copy from here */
    TGT_ADDR_T		destination;	/* to there */
    UINT32		numBytes;	/* number of bytes to copy */
    } WTX_MSG_MEM_MOVE_DESC;

typedef struct wtx_msg_mem_set_desc	/* memory setting desc. */
    {
    WTX_CORE		wtxCore;	/* WTX message core */

    UINT32		value;		/* value to set */
    UINT8		width;		/* value width 1, 2 or 4 bytes */
    TGT_ADDR_T		startAddr;	/* set from here */
    UINT32		numItems;	/* number of items to set */
    } WTX_MSG_MEM_SET_DESC;

typedef struct wtx_msg_context_desc	/* context creation desc. */
    {
    WTX_CORE		wtxCore;	/* WTX message core */

    WTX_CONTEXT_TYPE	contextType;	/* type of context */
    WTX_RETURN_TYPE	returnType;	/* int or double */
    char *		name;		/* task name */
    UINT32		priority;	/* task priority */
    UINT32		options;	/* task options */
    TGT_ADDR_T		stackBase;	/* base of stack */
    UINT32		stackSize;	/* stack size */
    TGT_ADDR_T		entry;		/* context entry point */
    INT32		redirIn;	/* redir. in file or NULL */
    INT32		redirOut;	/* redir. out file or NULL */
    TGT_ARG_T		args[10 ];	/* arguments */
    void * 		pReserved;	/* reserved */
    } WTX_MSG_CONTEXT_DESC;

typedef struct wtx_msg_context_step_desc /* single step desc. */
    {
    WTX_CORE		wtxCore;	/* WTX message core */

    WTX_CONTEXT	 	context;	/* context to step */
    TGT_ADDR_T		startAddr;	/* lower bound of step range */
    TGT_ADDR_T		endAddr;	/* upper bound of step range */
    } WTX_MSG_CONTEXT_STEP_DESC;

typedef struct wtx_gopher_tape		/* gopher tape */
    {
    UINT16	len;			/* length of tape */
    char *	data;			/* tape data */
    } WTX_GOPHER_TAPE;

typedef struct WTX_MSG_GOPHER_TAPE 	/* gopher tape message */
    {
    WTX_CORE		wtxCore;	/* WTX message core */

    WTX_GOPHER_TAPE	tape;		/* gopher tape */
    } WTX_MSG_GOPHER_TAPE;

typedef struct wtx_msg_wtxregd_pattern	/* wtxregd pattern */
    {
    WTX_CORE		wtxCore;	/* WTX message core */

    char *		name;		/* pattern to match wpwrName */
    char *		type;		/* pattern to match wpwrType */
    char *		key;		/* pattern to match wpwrKey */
    } WTX_MSG_WTXREGD_PATTERN;

typedef struct wtx_svr_desc		/* server descriptor */
    {
    char *		wpwrName;	/* name of wpwr service */
    char *		wpwrType;	/* type of service */
    char *		wpwrKey;	/* unique service key */
    } WTX_SVR_DESC;

typedef struct wtx_msg_svr_desc		/* server descriptor message */
    {
    WTX_CORE		wtxCore;	/* WTX message core */

    WTX_SVR_DESC	wtxSvrDesc;	/* Server Descriptor */
    } WTX_MSG_SVR_DESC;

typedef struct wtx_svr_desc_q		/* server descriptor queue */
    {
    WTX_SVR_DESC	    wtxSvrDesc;	/* Server Descriptor */
    struct wtx_svr_desc_q * pNext;	/* next descriptor */
    } WTX_SVR_DESC_Q;

typedef struct wtx_msg_svr_desc_q	/* server descriptor queue message */
    {
    WTX_CORE		  wtxCore;	/* WTX message core */

    WTX_SVR_DESC_Q	  wtxSvrDescQ;	/* Server Descriptor Queue */
    } WTX_MSG_SVR_DESC_Q;






# 94 "/pMaster/tornado-1.01/host/include/wtx.h" 2



/* defines */





#define WTX_TRY(hWtx) {	WTX_HANDLER_T errHandler;	jmp_buf jumpBuf;	wtxErrClear (hWtx);	errHandler = wtxErrHandlerAdd (hWtx, &wtxErrExceptionFunc, &jumpBuf);	if (setjmp (jumpBuf) == 0)








#define WTX_CATCH(hWtx, errCode) else if (wtxErrGet (hWtx) == errCode)
#define WTX_CATCH_ALL(hWtx) else

#define WTX_TRY_END(hWtx) wtxErrHandlerRemove (hWtx, errHandler);}



#define WTX_THROW(hWtx, errCode) wtxErrDispatch (hWtx, errCode)


typedef enum wtx_endian_t
    {
    WTX_ENDIAN_BIG	= 0,
    WTX_ENDIAN_LITTLE	= 1,
    WTX_ENDIAN_UNKNOWN	= (-1)
    } WTX_ENDIAN_T;

typedef struct _wtx * HWTX;		/* WTX Handle */



typedef BOOL32 (*WTX_HANDLER_FUNC) (HWTX hWtx,
				    void * pClientData,
				    void * pCallData);





typedef struct _wtx_handler_t * WTX_HANDLER_T;


/* XXX - expect typedefs below to move into wtxtypes.h or wtxmsg.h */

typedef struct wtx_context_desc		/* context creation desc. */
    {
    WTX_CONTEXT_TYPE	contextType;	/* context type */
    WTX_RETURN_TYPE	returnType;	/* int or double */
    char *		name;		/* name	*/
    UINT32		priority;	/* priority */
    UINT32		options;	/* options */
    TGT_ADDR_T		stackBase;	/* base of stack */
    UINT32		stackSize;	/* stack size */
    TGT_ADDR_T		entry;		/* context entry point */
    INT32		redirIn;	/* redir. in file or NULL */
    INT32		redirOut;	/* redir. out file or NULL */
    TGT_ARG_T		args[10 ];	/* arguments */
    } WTX_CONTEXT_DESC;

typedef struct wtx_evtpt_list  	/* eventpoint list message */
    {
    UINT32		nEvtpt;		/* num. eventpoint in list */
    WTX_EVTPT *		pEvtpt;		/* eventpoint list */
    } WTX_EVTPT_LIST;

typedef struct wtx_ld_m_file_desc	/* object module file desc. */
    {
    char *	   	filename;	/* object file name */
    INT32	   	loadFlag;	/* behavior control flags */
    UINT32	  	moduleId;	/* module identifier */
    UINT32	   	nSections;	/* number of sections */
    LD_M_SECTION * 	section;	/* section description */
    WTX_SYM_LIST   	undefSymList;	/* list of undefined symbols */
    } WTX_LD_M_FILE_DESC;

typedef struct wtx_mem_info	 	/* memory information */
    {
    UINT32 	curBytesFree;		/* number of free bytes */
    UINT32 	curBytesAllocated;	/* cur. # of bytes alloc. */
    UINT32 	cumBytesAllocated;	/* cum. # of bytes alloc. */
    UINT32 	curBlocksFree;		/* cur. # of free blocks */
    UINT32 	curBlocksAlloc;		/* cur. # of blocks alloc. */
    UINT32 	cumBlocksAlloc;		/* cum. # of blocks alloc. */
    UINT32 	avgFreeBlockSize;	/* average free blocks size */
    UINT32 	avgAllocBlockSize;	/* average alloc. blocks size */
    UINT32 	cumAvgAllocBlockSize;	/* cum. avg alloc. block size */
    UINT32 	biggestBlockSize;	/* size of biggest block */
    void * 	pReserved;		/* reserved */
    } WTX_MEM_INFO;

typedef struct wtx_module_info	/* object module information */
    {
    UINT32	  	moduleId;	/* module Id */
    char *	  	moduleName;	/* module name */
    char *	  	format;		/* object file format */
    UINT32	  	group;		/* group number */
    int		  	loadFlag;	/* flags used to load mod. */
    UINT32	  	nSegments;	/* number of segments */
    OBJ_SEGMENT *	segment;	/* segment description */
    void *	  	pReserved;	/* reserved */
    } WTX_MODULE_INFO;

typedef struct wtx_module_list	/* object module list */
    {
    UINT32		numObjMod; 	/* number of module in list */
    UINT32 *	 	modIdList; 	/* list of object module id */
    } WTX_MODULE_LIST;

typedef struct wtx_ts_info		/* TS information message */
    {
    WTX_TGT_LINK_DESC	tgtLinkDesc;	/* Target link descriptor */
    WTX_TGT_INFO	tgtInfo;	/* info obtained from Target */
    WTX_TOOL_DESC *	pWtxToolDesc;	/* info about attached Tools */
    char *		version;	/* Target Server version */
    char *		userName;	/* target server user name */
    char *		startTime;	/* target server start time */
    char *		accessTime;	/* target server access time */
    char *		lockMsg;	/* lock/authorization message */
    void *		pReserved;	/* reserved */
    } WTX_TS_INFO;


/* globals */








/* function declarations */



extern STATUS wtxEach (HWTX hWtx, const char * namePat, const char * typePat,
		       const char * keyPat, FUNCPTR routine, void * arg);
extern WTX_DESC * wtxInfo (HWTX hWtx, const char * name);
extern WTX_DESC_Q * wtxInfoQ (HWTX hWtx,
			      const char * namePat,
			      const char * typePat,
			      const char * keyPat);
extern STATUS	wtxInitialize (HWTX *phWtx);
extern STATUS	wtxProbe (HWTX hWtx);
extern WTX_DESC * wtxRegister (HWTX hWtx, const char * name,
			       const char * type, const char * key);
extern STATUS	wtxTerminate (HWTX hWtx);
extern STATUS	wtxTimeoutSet (HWTX hWtx, UINT32 msec);
extern STATUS	wtxTimeoutGet (HWTX hWtx, UINT32 * pMsec);
extern STATUS 	wtxUnregister (HWTX hWtx, const char * name);

extern STATUS	wtxAgentModeSet (HWTX hWtx, WTX_AGENT_MODE_TYPE agentMode);
extern WTX_AGENT_MODE_TYPE wtxAgentModeGet (HWTX hWtx);
extern UINT32	wtxBreakpointAdd (HWTX hWtx, WTX_CONTEXT_TYPE contextType,
			          WTX_CONTEXT_ID_T contextId,
				  TGT_ADDR_T tgtAddr);
extern STATUS	wtxClientDataGet (HWTX hWtx, void ** ppClientData);
extern STATUS	wtxClientDataSet (HWTX hWtx, void * pClientData);
extern INT32	wtxConsoleCreate (HWTX hWtx, const char * name,
				  const char * display,
				  INT32 * fdIn, INT32 * fdOut);
extern STATUS	wtxConsoleKill (HWTX hWtx, INT32 consoleId);
extern STATUS	wtxContextCont (HWTX hWtx, WTX_CONTEXT_TYPE contextType,
				WTX_CONTEXT_ID_T contextId);
extern WTX_CONTEXT_ID_T	wtxContextCreate (HWTX hWtx,
					  WTX_CONTEXT_DESC * pContextDesc);
extern UINT32	wtxContextExitNotifyAdd (HWTX hWTx,
					 WTX_CONTEXT_TYPE contextType,
					 WTX_CONTEXT_ID_T);
extern STATUS	wtxContextKill (HWTX hWtx, WTX_CONTEXT_TYPE contextType,
				WTX_CONTEXT_ID_T contextId);
extern STATUS	wtxContextResume (HWTX hWtx, WTX_CONTEXT_TYPE contextType,
				  WTX_CONTEXT_ID_T contextId);
extern STATUS	wtxContextStep (HWTX hWtx, WTX_CONTEXT_TYPE contextType,
				WTX_CONTEXT_ID_T contextId,
				TGT_ADDR_T stepStart, TGT_ADDR_T stepEnd);
extern STATUS	wtxContextSuspend (HWTX hWtx, WTX_CONTEXT_TYPE contextType,
				   WTX_CONTEXT_ID_T contextId);
extern STATUS	wtxErrClear (HWTX hWtx);
extern WTX_ERROR_T	wtxErrGet (HWTX hWtx);
extern STATUS	wtxErrSet (HWTX hWtx, UINT32 errCode);
extern const char *	wtxErrMsgGet (HWTX hWtx);
extern const char *	wtxErrToMsg (HWTX hWtx, WTX_ERROR_T errCode);
extern STATUS	wtxErrDispatch (HWTX hWtx, WTX_ERROR_T errCode);
extern BOOL32	wtxErrExceptionFunc (HWTX hWtx, void *pClientData,
				     void *pCallData);
extern WTX_HANDLER_T	wtxErrHandlerAdd (HWTX hWtx, WTX_HANDLER_FUNC pFunc,
					  void * pClientData);
extern STATUS	wtxErrHandlerRemove (HWTX hWtx, WTX_HANDLER_T pHandler);
extern STATUS	wtxEventAdd (HWTX hWtx, const char * event,
			     UINT32 addlDataLen, const void * pAddlData);
extern WTX_EVENT_DESC * wtxEventGet (HWTX hWtx);
extern STATUS	wtxEventpointDelete (HWTX hWtx, UINT32 evtptId);
extern WTX_EVTPT_LIST * wtxEventpointList (HWTX hWTx);
extern STATUS	wtxFileClose (HWTX hWtx, INT32 fileDescriptor);
extern INT32	wtxFileOpen (HWTX hWtx, const char * fileName,
			     WTX_OPEN_FLAG flags, INT32 mode, INT32 channel);
extern WTX_CONTEXT_ID_T	wtxFuncCall (HWTX hWtx,
				     WTX_CONTEXT_DESC * pContextDesc);
extern STATUS	wtxDirectCall (HWTX hWtx, TGT_ADDR_T entry, void * pRetVal,
			       TGT_ARG_T arg0, TGT_ARG_T arg1, TGT_ARG_T arg2,
			       TGT_ARG_T arg3, TGT_ARG_T arg4, TGT_ARG_T arg5,
			       TGT_ARG_T arg6, TGT_ARG_T arg7, TGT_ARG_T arg8,
			       TGT_ARG_T arg9);
extern WTX_GOPHER_TAPE * wtxGopherEval (HWTX hWtx, const char * inputString);
extern WTX_MEM_INFO * wtxMemInfoGet (HWTX hWtx);
extern STATUS	wtxMemAddToPool (HWTX hWtx, TGT_ADDR_T address, UINT32 size);
extern TGT_ADDR_T	wtxMemAlign (HWTX hWtx, TGT_ADDR_T alignment,
				    UINT32 numBytes);
extern TGT_ADDR_T	wtxMemAlloc (HWTX hWtx, UINT32 numBytes);
extern UINT32	wtxMemChecksum (HWTX hWtx, TGT_ADDR_T startAddr,
				UINT32 numBytes);
extern STATUS	wtxMemFree (HWTX hWtx, TGT_ADDR_T address);
extern STATUS	wtxMemMove (HWTX hWtx, TGT_ADDR_T srcAddr, TGT_ADDR_T destAddr,
			    UINT32 numBytes);
extern UINT32	wtxMemRead (HWTX hWtx, TGT_ADDR_T fromAddr, void * toAddr,
			    UINT32 numBytes);
extern TGT_ADDR_T	wtxMemRealloc (HWTX hWtx, TGT_ADDR_T address,
	        		       UINT32 numBytes);
extern UINT32	wtxMemSet (HWTX hWtx, TGT_ADDR_T addr, UINT32 numBytes,
			    UINT32 val);
extern STATUS	wtxMemScan (HWTX hWTx, BOOL32 match, TGT_ADDR_T startAddr,
			    TGT_ADDR_T endAddr, UINT32 numBytes,
			    void * pattern, TGT_ADDR_T * pResult);
extern UINT32	wtxMemWrite (HWTX hWtx, void * fromAddr, TGT_ADDR_T toAddr,
			     UINT32 numBytes);
extern char *	wtxObjModuleFindName (HWTX hWtx, UINT32 modId);
extern UINT32	wtxObjModuleFindId (HWTX hWtx, const char *name);
extern WTX_MODULE_INFO * wtxObjModuleInfoGet (HWTX hWtx, UINT32 modId);
extern WTX_MODULE_LIST * wtxObjModuleList (HWTX hWtx);
extern WTX_LD_M_FILE_DESC * wtxObjModuleLoad (HWTX hWtx,
					      WTX_LD_M_FILE_DESC *pFileDesc);
extern STATUS	wtxObjModuleUnload (HWTX hWtx, UINT32 modId);
/* removed Fulup
extern STATUS	wtxObjModuleUndefSymAdd (HWTX hWtx, char * wtxsymName,
					 UINT32 symGroup);
*/
extern STATUS	wtxRegisterForEvent (HWTX hWtx, const char * regExp);
extern STATUS	wtxRegsGet (HWTX hWtx,
			    WTX_CONTEXT_TYPE contextType,
			    WTX_CONTEXT_ID_T contextId,
			    WTX_REG_SET_TYPE regSet,
			    UINT32 firstByte, UINT32 numBytes,
			    void * regMemory);
extern STATUS	wtxRegsSet (HWTX hWtx, WTX_CONTEXT_TYPE contextType,
			    WTX_CONTEXT_ID_T contextId,
			    WTX_REG_SET_TYPE regSet, UINT32 firstByte,
			    UINT32 numBytes, void * regMemory);
extern STATUS	wtxResultFree (HWTX hWtx, void * pResult);
extern STATUS	wtxServiceAdd (HWTX hWtx, UINT32 * wtxSvcNum,
			       UINT32 wdbSvcNum, char * wdbName,
			       char * wdbObjFile, char * wdbInitRtn,
			       char * wtxObjFile, char * wtxName,
			       char * wtxInProcName, char * wtxOutProcName);
extern TGT_ADDR_T       wtxStrToTgtAddr (HWTX hWtx, const char *);
extern INT32            wtxStrToInt32 (HWTX hWtx, const char *);
extern WTX_CONTEXT_ID_T wtxStrToContextId (HWTX hWtx, const char *);
extern WTX_CONTEXT_TYPE wtxStrToContextType (HWTX hWtx, const char *);
extern WTX_EVENT_TYPE	wtxStrToEventType (HWTX hWtx, const char *);
extern STATUS		wtxSymAdd (HWTX hWtx, const char * wtxsymName,
				   TGT_ADDR_T symValue, UINT8 symType);
/* removed Fulup
extern STATUS		wtxSymAddWithGroup (HWTX hWtx, const char * wtxsymName,
				   	    TGT_ADDR_T symValue,
					    UINT8 symType, UINT16 group);
*/
extern WTX_SYMBOL *	wtxSymFind (HWTX hWtx, const char *wtxsymName,
				    TGT_ADDR_T symValue, BOOL32 exactName,
				    UINT8 symType, UINT8 typeMask);
extern WTX_SYM_LIST *	wtxSymListGet (HWTX hWtx, const char *string,
				       const char *moduleNameOrId,
				       TGT_ADDR_T value,  BOOL32 listUnknown);
extern STATUS		wtxSymRemove (HWTX hWtx, const char *wtxsymName,
				      UINT8 symType);
extern WTX_SYM_TBL_INFO * wtxSymTblInfoGet (HWTX hWtx);
extern UINT32		wtxTargetRtTypeGet (HWTX hWtx);
extern const char *	wtxTargetRtVersionGet (HWTX hWtx);
extern UINT32		wtxTargetCpuTypeGet (HWTX hWtx);
extern BOOL32		wtxTargetHasFppGet (HWTX hWtx);
extern WTX_ENDIAN_T	wtxTargetEndianGet (HWTX hWtx);
extern const char *	wtxTargetBootlineGet (HWTX hWtx);
extern const char *	wtxTargetBspNameGet (HWTX hWtx);
extern STATUS	wtxTargetReset (HWTX hWtx);
extern STATUS	wtxTargetAttach (HWTX hWtx);
extern STATUS	wtxToolAttach (HWTX hWtx, const char * targetName,
				const char * toolName);
//Fulup extern STATUS	wtxToolAttachHookSet (HWTX hWtx, FUNCPTR hookFunc);
extern char *	wtxToolNameGet (HWTX hWtx);
extern BOOL32	wtxToolConnected (HWTX hWtx);
extern STATUS	wtxToolDetach (HWTX hWtx);
// Fulup extern UINT32	wtxToolIdGet (HWTX hWtx);
extern WTX_TS_INFO * wtxTsInfoGet (HWTX hWtx);
extern STATUS	wtxTsKill (HWTX hWtx);
extern STATUS	wtxTsLock (HWTX hWtx);
extern const char *	wtxTsNameGet (HWTX hWtx);
extern STATUS	wtxTsRestart (HWTX hWtx);
extern STATUS	wtxTsUnlock (HWTX hWtx);
extern BOOL32	wtxVerify (HWTX hWtx);
extern INT32	wtxVioChanGet (HWTX hWtx);
extern STATUS	wtxVioChanRelease (HWTX hWtx, INT32 channel);
extern STATUS	wtxVioCtl (HWTX hWtx, INT32 channel,
			   UINT32 request, UINT32 arg);
extern WTX_VIO_FILE_DESC ** wtxVioFileList (HWTX hWtx);
extern UINT32	wtxVioWrite (HWTX hWtx, INT32 channel, void * pData,
			     UINT32 numBytes);
// Fulup extern char *	wtxTsVersionGet (HWTX hWtx);
