
#line 2 "lexFrontendCc.cxx"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer yycc__create_buffer
#define yy_delete_buffer yycc__delete_buffer
#define yy_scan_buffer yycc__scan_buffer
#define yy_scan_string yycc__scan_string
#define yy_scan_bytes yycc__scan_bytes
#define yy_init_buffer yycc__init_buffer
#define yy_flush_buffer yycc__flush_buffer
#define yy_load_buffer_state yycc__load_buffer_state
#define yy_switch_to_buffer yycc__switch_to_buffer
#define yypush_buffer_state yycc_push_buffer_state
#define yypop_buffer_state yycc_pop_buffer_state
#define yyensure_buffer_stack yycc_ensure_buffer_stack
#define yy_flex_debug yycc__flex_debug
#define yyin yycc_in
#define yyleng yycc_leng
#define yylex yycc_lex
#define yylineno yycc_lineno
#define yyout yycc_out
#define yyrestart yycc_restart
#define yytext yycc_text
#define yywrap yycc_wrap
#define yyalloc yycc_alloc
#define yyrealloc yycc_realloc
#define yyfree yycc_free

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define yycc__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer yycc__create_buffer
#endif

#ifdef yy_delete_buffer
#define yycc__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer yycc__delete_buffer
#endif

#ifdef yy_scan_buffer
#define yycc__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer yycc__scan_buffer
#endif

#ifdef yy_scan_string
#define yycc__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string yycc__scan_string
#endif

#ifdef yy_scan_bytes
#define yycc__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes yycc__scan_bytes
#endif

#ifdef yy_init_buffer
#define yycc__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer yycc__init_buffer
#endif

#ifdef yy_flush_buffer
#define yycc__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer yycc__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define yycc__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state yycc__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define yycc__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer yycc__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define yycc_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state yycc_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define yycc_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state yycc_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define yycc_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack yycc_ensure_buffer_stack
#endif

#ifdef yylex
#define yycc_lex_ALREADY_DEFINED
#else
#define yylex yycc_lex
#endif

#ifdef yyrestart
#define yycc_restart_ALREADY_DEFINED
#else
#define yyrestart yycc_restart
#endif

#ifdef yylex_init
#define yycc_lex_init_ALREADY_DEFINED
#else
#define yylex_init yycc_lex_init
#endif

#ifdef yylex_init_extra
#define yycc_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra yycc_lex_init_extra
#endif

#ifdef yylex_destroy
#define yycc_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy yycc_lex_destroy
#endif

#ifdef yyget_debug
#define yycc_get_debug_ALREADY_DEFINED
#else
#define yyget_debug yycc_get_debug
#endif

#ifdef yyset_debug
#define yycc_set_debug_ALREADY_DEFINED
#else
#define yyset_debug yycc_set_debug
#endif

#ifdef yyget_extra
#define yycc_get_extra_ALREADY_DEFINED
#else
#define yyget_extra yycc_get_extra
#endif

#ifdef yyset_extra
#define yycc_set_extra_ALREADY_DEFINED
#else
#define yyset_extra yycc_set_extra
#endif

#ifdef yyget_in
#define yycc_get_in_ALREADY_DEFINED
#else
#define yyget_in yycc_get_in
#endif

#ifdef yyset_in
#define yycc_set_in_ALREADY_DEFINED
#else
#define yyset_in yycc_set_in
#endif

#ifdef yyget_out
#define yycc_get_out_ALREADY_DEFINED
#else
#define yyget_out yycc_get_out
#endif

#ifdef yyset_out
#define yycc_set_out_ALREADY_DEFINED
#else
#define yyset_out yycc_set_out
#endif

#ifdef yyget_leng
#define yycc_get_leng_ALREADY_DEFINED
#else
#define yyget_leng yycc_get_leng
#endif

#ifdef yyget_text
#define yycc_get_text_ALREADY_DEFINED
#else
#define yyget_text yycc_get_text
#endif

#ifdef yyget_lineno
#define yycc_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno yycc_get_lineno
#endif

#ifdef yyset_lineno
#define yycc_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno yycc_set_lineno
#endif

#ifdef yywrap
#define yycc_wrap_ALREADY_DEFINED
#else
#define yywrap yycc_wrap
#endif

#ifdef yyalloc
#define yycc_alloc_ALREADY_DEFINED
#else
#define yyalloc yycc_alloc
#endif

#ifdef yyrealloc
#define yycc_realloc_ALREADY_DEFINED
#else
#define yyrealloc yycc_realloc
#endif

#ifdef yyfree
#define yycc_free_ALREADY_DEFINED
#else
#define yyfree yycc_free
#endif

#ifdef yytext
#define yycc_text_ALREADY_DEFINED
#else
#define yytext yycc_text
#endif

#ifdef yyleng
#define yycc_leng_ALREADY_DEFINED
#else
#define yyleng yycc_leng
#endif

#ifdef yyin
#define yycc_in_ALREADY_DEFINED
#else
#define yyin yycc_in
#endif

#ifdef yyout
#define yycc_out_ALREADY_DEFINED
#else
#define yyout yycc_out
#endif

#ifdef yy_flex_debug
#define yycc__flex_debug_ALREADY_DEFINED
#else
#define yy_flex_debug yycc__flex_debug
#endif

#ifdef yylineno
#define yycc_lineno_ALREADY_DEFINED
#else
#define yylineno yycc_lineno
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 47
#define YY_END_OF_BUFFER 48
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[517] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   48,   27,   27,   32,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,    2,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   39,   39,   39,   39,   39,
       39,   39,   47,   47,   47,   41,   41,   47,   33,   30,
       29,   31,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   28,    0,    0,    5,    0,    0,    0,    0,    0,
       24,   24,   24,   24,   36,    0,    0,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,    0,

        2,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,    0,    0,    0,    0,   40,   36,    0,    0,    0,
        0,    0,    0,    0,   33,   29,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    5,    0,    0,    0,
        0,    0,   24,   24,   24,   24,   24,   24,    0,    0,
        0,   35,    0,    0,   44,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   22,    0,    0,    0,    0,    0,
       24,   24,   24,   24,   34,   34,   34,   34,    0,    0,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   24,   24,   24,   24,    0,    0,
       28,   14,   14,   28,   28,    0,   28,   28,   28,   28,

       28,   28,   28,   28,   28,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,    0,   37,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    3,    0,    0,    0,    0,   24,   24,   24,   24,
        0,    0,   26,   26,   28,    0,   28,   28,   28,   28,
       28,   28,   17,   17,   28,   28,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   28,   18,   28,
        9,    9,   28,   37,    0,    0,    0,    0,   45,   46,
        0,    0,    0,    0,    0,   45,    0,    7,    0,    0,

       24,   24,   24,   24,    0,    0,   46,    0,   28,   28,
       28,   20,   11,   16,   16,   28,   28,   21,    0,    0,
        0,   19,   28,   28,    0,    0,    0,    0,    0,    0,
        0,   11,   21,    0,    0,    0,    7,    0,    6,    4,
       24,   24,   24,   45,    0,    0,   23,    0,   12,   28,
        0,   15,   15,   28,   21,    0,    0,   28,   28,    0,
        0,    0,   12,    0,    0,    0,    0,    8,    6,   24,
        0,   28,   25,   25,    0,    0,   28,   28,    0,    0,
        0,    0,    0,    0,    0,   13,    0,    0,   10,   10,
        0,   38,    0,   13,    0,    0,    0,   38,    0,    0,

        0,   42,    0,    0,    0,   42,    0,    0,    0,    0,
       43,    0,    0,    1,    1,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    1,    7,    1,    8,
        9,   10,   11,    1,   11,    5,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   14,    1,   15,
        4,   16,    1,    1,   17,   18,   19,   20,   21,    5,
        5,   22,   23,    5,    5,   24,   25,   26,   27,   28,
        5,   29,   30,   31,   32,    5,   33,   34,    5,    5,
        1,    1,   35,    1,    5,    1,   36,   37,   38,   39,

       40,   41,   42,    5,   43,   44,    5,   45,   46,   47,
       48,   49,    5,   50,   51,   52,   53,   54,   55,   56,
       57,    5,   58,    1,    1,    5,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[59] =
    {   0,
        1,    2,    3,    4,    5,    1,    5,    1,    1,    4,
        4,    4,    5,    6,    1,    1,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    1,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    1
    } ;

static const flex_int16_t yy_base[530] =
    {   0,
        0,   57,   67,   89,   59,   61,   62,   63, 1160, 1159,
      107,  111, 1161, 1164,  145, 1164,  123, 1146,  124,  198,
      166,    0,   69,   54,   46,   90,   62,   58,  100,   84,
       53,   68,   70,  245,  126,  124,  118,  117,  127,  140,
      152,  158,  166,  168,   93, 1164,  194, 1147,  175, 1118,
      128, 1120, 1164,  179, 1123, 1164,  180, 1152, 1164, 1164,
     1141, 1164,    0,  222,  199, 1103, 1105, 1102,  145, 1107,
     1099, 1134, 1133,  248,  217,  160, 1106, 1098, 1108,  298,
      302,  345,  313,  318,  331,  392, 1127,  211,  206,  170,
      217,  213,  229,  234,  204,  190,  222,  275,  214,    0,

      332, 1108, 1116, 1113, 1107, 1117, 1106, 1091, 1079, 1087,
     1081,  231,  251,  253,  283,  281,  264,  317,  284,  331,
      330,  338, 1092,  304, 1094, 1164, 1120, 1126, 1083, 1078,
     1074, 1081, 1074, 1120, 1164, 1109,  346, 1070, 1077, 1074,
     1078,  321, 1080, 1066, 1072,    0, 1112, 1065, 1061, 1070,
     1072, 1059,  396,  407,  411,  424,  427,  440,  455, 1105,
      502, 1164,  287,  367, 1091,  344,  340,  359,  348,  278,
      370,  376,  406,  411,  266,  413,  429,  367,  431,  418,
     1078, 1086, 1086, 1073, 1085, 1065, 1048,  419, 1063,  433,
      454,  449,  455,  460,  464,  467,  465,  468,  471,  472,

     1088, 1048, 1051, 1055, 1054, 1057, 1052, 1048, 1040, 1035,
     1036, 1042, 1034, 1045,    0, 1034, 1043, 1039, 1036, 1033,
      489,  515,  519,  534, 1164,  550, 1029, 1029,  389,  494,
      476,  488,  539,  473,  475,  533,  474,  478,  523,  501,
      535,  542,  537,  514, 1050, 1055, 1048, 1057, 1049, 1041,
     1040, 1019, 1029, 1028, 1015,  544,  549,  551,  557,  554,
      558,  569,  550,  555,  556,  561,  580, 1026, 1015, 1026,
     1014, 1015, 1014, 1024, 1023, 1018, 1014, 1003, 1008, 1002,
     1003, 1005,  998, 1007,  598,  609,  613,  629,  590,  374,
      632, 1164, 1035,  589,  572,   86,  582,  574,  576,  604,

      585,  608,  642,  602,  618, 1019, 1018, 1017, 1021, 1021,
     1014, 1019,  990,  990,  989,  995,  622,  581,  633,  648,
      638,  644,  647,  666,  637,  641,  649,  669, 1035,  990,
      994,  982,  668,  994,  992,  979,  978,  991,  990,  991,
      987, 1164,  973,  984,  984,  975,  687,  691,  703,  718,
      669,  670, 1164, 1007,  672,  973,  667,  671,  694,  690,
      707,  682, 1164, 1005,  704,  680,  987,  991,  985, 1013,
      995,  990,  993,  733,  964,  969,  971,  724, 1164,  726,
     1164,  994,  719, 1005,  966,  969,  729,  737, 1002, 1001,
      954,  961,  948,  745,  954, 1164,  739,  996,  957,  954,

      746,  750,  762,  785,  764,  740,  993,  942,  749,  766,
      735,  767,  979, 1164,  978,  791,  770,  776,  989,  971,
      953, 1164,  757,  763,  941,  948,  796,  935,  919,  798,
      918, 1164,  950,  804,  761,  890,  920,  802,  919, 1164,
      809,  812,  824,  917,  814,  917, 1164,  813,  904,  804,
      827, 1164,  903,  837,  914,  884,  875,  811,  816,  859,
      870,  861, 1164,  869,  858,  854,  855, 1164,  902,  842,
      828,  853, 1164,  889,  880,  860,  843,  856,  859,  861,
      862,  853,  857,  860,  863,  880,  873,  866, 1164,  877,
      870,  888,  849, 1164,  848,  837,  836,  879,  829,  825,

      825,  848,  791,  639,  641,  673,  873,  447,  359,  877,
     1164,  326,  267,  242,  146, 1164,  924,  930,  936,  942,
      944,  949,  955,  961,  966,  971,   56,  977,  982
    } ;

static const flex_int16_t yy_def[530] =
    {   0,
      516,    1,  517,  517,  518,  518,  519,  519,  520,  520,
      518,  518,  516,  516,  516,  516,  516,  521,  516,  522,
      516,  523,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  516,  516,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  524,  516,  516,
      516,  516,   15,  516,  516,  516,  516,  516,  516,  516,
      516,  521,  516,  516,  516,  516,  516,  516,  516,  525,
      522,  522,  522,  522,  516,  526,  523,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,   34,

      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  516,  516,  516,  516,  516,  516,  526,  516,  516,
      516,  516,  516,  524,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  527,  516,  516,  516,  516,
      516,  516,  525,  525,  525,  525,  522,  522,  528,  526,
      526,  516,  526,  526,  523,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,

      528,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  527,  516,  516,  516,  516,  516,
      525,  525,  522,  522,  516,  516,  516,  516,  526,  526,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  525,  525,  522,  522,  526,  526,
      521,  516,  521,  521,  521,  516,  521,  521,  521,  521,

      521,  521,  521,  521,  521,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  525,  525,  522,  522,
      526,  526,  516,  521,  521,  516,  521,  521,  521,  521,
      521,  521,  516,  521,  521,  521,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  521,  516,  521,
      516,  521,  521,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  529,  516,  516,

      525,  525,  522,  522,  526,  526,  516,  516,  521,  521,
      521,  516,  516,  516,  521,  521,  521,  521,  516,  516,
      516,  516,  521,  521,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  529,  529,  516,  516,
      525,  525,  522,  526,  526,  516,  516,  516,  516,  521,
      516,  516,  521,  521,  516,  516,  516,  521,  521,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  525,
      526,  521,  516,  521,  516,  516,  521,  521,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  521,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,

      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,    0,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516
    } ;

static const flex_int16_t yy_nxt[1223] =
    {   0,
       14,   15,   16,   17,   18,   19,   20,   14,   14,   17,
       17,   21,   18,   14,   22,   14,   18,   18,   23,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   14,   18,   18,   24,   18,   25,
       26,   18,   27,   18,   28,   18,   18,   18,   29,   18,
       30,   31,   32,   33,   18,   18,   18,   14,   34,   73,
      215,   16,   35,   16,   16,   16,   73,   73,   47,   16,
       54,   73,   54,   57,   57,   73,   48,   36,   49,   37,
       38,   73,   73,   73,   39,   40,   41,  296,   50,   51,
       47,   16,   90,   52,   42,   88,   43,   73,   48,   44,

       49,   89,   55,   73,   55,   93,   73,   45,   92,   97,
       50,   51,   99,   73,   98,   52,   60,   60,   60,   61,
       60,   60,   60,   61,   64,   74,   64,   74,  356,   64,
       73,   73,   64,   64,   64,   96,   75,   73,   75,   91,
       73,   62,  113,  114,  121,   62,   63,  515,   64,   94,
       65,   64,   95,   73,   64,   64,   64,  112,  115,   76,
      116,   76,   77,   71,   77,   73,   78,   64,   78,   64,
       68,   73,   64,  130,  131,   85,   64,   86,   79,   73,
       79,   73,  117,   73,  127,   66,  128,   67,  127,  127,
      128,  128,   68,   69,  142,  122,  148,  143,   70,   80,

      137,   64,  118,   73,   82,   89,   71,   64,   64,   64,
      149,   73,   90,   68,  120,  123,  124,   73,  147,   73,
      125,  119,  168,   64,   73,   64,   73,   73,   64,   75,
       73,   64,   64,   64,  138,   73,  166,   77,   83,  175,
      174,   78,   73,  515,   73,   84,  100,   73,   64,   74,
      101,   64,  167,   79,   64,   64,   64,  170,  190,  169,
       75,  191,   71,  179,   73,  102,   73,  103,  104,   68,
      176,  193,  105,  106,  107,  171,  172,   73,  192,   73,
      196,  173,  108,  138,  109,   66,   77,  110,   73,  162,
       78,   73,   68,   69,   73,  111,   73,   73,   70,   80,

      194,   64,   79,  516,  154,  516,  514,   64,   64,   64,
      195,  516,  516,  516,  516,   73,  516,  177,  240,  516,
      235,  516,  516,  516,  516,  178,   73,  516,  516,  516,
       73,   73,   64,  137,   64,  198,  229,   64,  155,  122,
      159,   64,   64,   73,   73,  156,   64,  137,   64,  130,
      131,   82,  197,   73,   64,   64,   64,   73,   73,  123,
      124,   73,  157,  210,  125,  200,  158,  138,  211,  162,
       77,   71,   73,  231,   78,  170,  162,  514,   68,  175,
       73,  138,  199,   73,   77,   83,   79,  234,   78,   73,
      232,  162,   84,  161,  162,  161,  513,  516,  161,  516,

       79,  161,  161,  161,  233,  516,  516,  516,   64,  243,
       64,  236,  516,  154,  516,  230,   64,   64,   64,   73,
      516,  516,  516,  352,   73,  516,   73,  516,  516,  237,
      516,  289,  163,  516,  516,  516,  516,  516,  516,  164,
       73,  516,   73,  516,   73,  245,   73,  155,  246,  516,
      516,  516,  241,   73,  156,  239,  226,  238,  226,  256,
      221,  226,   73,  208,   64,  226,  226,   73,   73,  223,
      254,  259,  222,   73,  257,  258,  242,   73,   73,  224,
       73,   73,  244,  260,   73,   73,   73,   73,   73,   73,
      516,   73,  516,  512,  261,  227,  162,  262,  516,  516,

      516,   73,  228,  161,  162,  161,  291,  264,  161,  298,
      265,  161,  161,  161,   73,  263,  516,  299,  516,  294,
      516,  295,  516,  266,  516,  516,  516,   73,  516,  516,
      516,  285,   73,  290,  296,  516,   73,  516,  301,  291,
      292,  292,  163,  516,  516,  516,   73,   73,   73,  164,
       73,   64,   73,   64,  286,   73,   64,   73,  287,   64,
       64,   64,   73,   73,   73,  300,  305,   73,   73,   73,
       73,   73,  317,  302,   73,  297,  321,  318,  304,  319,
      320,  328,   73,  288,  293,   73,  322,   73,  303,   73,
       71,  323,  162,  329,   73,   73,  292,   68,   73,  516,

      324,  516,   73,  327,  325,  326,  378,  516,  516,  516,
      516,  355,  516,  359,  516,   73,  516,   73,  516,  516,
      516,   73,  516,  516,  516,  358,   73,  355,  357,  351,
      516,   73,  516,  353,  353,   73,  361,  347,  516,  516,
      516,  360,   73,  363,  363,   73,   73,  362,  365,  379,
       73,   73,  378,  366,   73,   73,  378,   73,  348,  349,
       73,   73,   73,  378,  350,  320,  380,  381,  381,  387,
      328,  162,  162,  407,  506,  388,  509,  354,  508,   73,
       73,  383,  329,  378,   73,   73,  320,  364,  516,  353,
      516,  412,  516,   73,  516,   73,  516,  516,  516,  363,

      516,  516,  516,  413,  516,  406,  516,   73,  414,  414,
      410,  382,  516,  516,  516,  405,   73,   73,  409,  516,
       73,  516,  416,  381,  418,  422,  402,  516,  516,  516,
      387,   73,   73,  401,  381,  381,  388,   73,  427,   73,
      434,  403,  162,  417,  423,  411,  412,  516,   73,  516,
      447,  516,  415,  516,  424,  516,  516,  516,  432,  516,
      516,  516,   73,  516,  414,  516,  162,  448,  451,  404,
       73,  516,  516,  516,  450,   73,   73,  455,  381,  449,
      432,  435,  436,   73,  441,  428,  516,  458,  516,   73,
      381,  445,  452,  452,  516,  516,  516,  427,   73,  448,

      459,  442,  444,  516,   73,  434,  465,  466,  454,  468,
      516,  463,  516,  516,  448,  516,  162,   73,  516,  516,
      516,  516,  516,  516,   73,  516,  463,  516,  451,   73,
      162,  477,  443,  516,  516,  516,  453,   73,  473,  473,
      432,  507,  472,  516,  428,  516,  435,  436,  452,  506,
       73,  516,  516,  516,  485,  478,   73,  489,  489,  470,
      491,  471,  320,  485,  485,  505,  486,  489,  489,   73,
      504,  491,  492,  403,  510,  494,  494,  444,  510,  503,
      498,  511,  474,  492,  502,  511,  501,  500,  499,  498,
       73,  441,  370,  146,  473,  497,  496,  495,  493,  488,

      487,  490,   73,  469,  484,  483,  482,  481,  480,  479,
      479,  489,  476,  489,  475,  455,   73,  146,  447,  162,
      469,  437,  467,  489,   46,   46,   46,   46,   46,   46,
       53,   53,   53,   53,   53,   53,   56,   56,   56,   56,
       56,   56,   58,   58,   58,   58,   58,   58,   72,   72,
       81,  455,   81,   81,   81,   87,   87,  464,   87,   87,
       87,  134,  134,  134,  134,  134,  134,  153,  396,  153,
      153,  160,  160,  160,  160,  160,  160,  225,  225,  225,
      225,  225,  225,  438,  462,  461,  438,  460,  457,  456,
      422,   73,  146,  446,  407,  440,  439,  437,  433,  431,

      430,  429,  407,  407,  426,  425,  384,   73,  370,  421,
      419,  370,  420,  419,  379,  419,  419,  419,   73,  408,
       73,  400,  399,  398,  397,  396,  395,  394,  393,  392,
      391,  390,  389,  267,  386,  385,  384,  377,  376,  375,
      374,  373,  372,  371,  370,  369,  368,  367,   73,  346,
      345,  344,  343,  342,  341,  340,  339,  338,  337,  336,
      335,  334,  333,  332,  331,  330,  316,  315,  314,  313,
      312,  311,  310,  309,  308,  307,  306,  141,  145,  284,
      283,  282,  281,  280,  279,  278,  277,  276,  275,  274,
      273,  272,  271,  270,  269,  268,  267,  516,  255,  253,

      252,  251,  250,  249,  248,  247,  165,  162,  220,  219,
      218,  217,  216,  147,  214,  213,  212,  209,  208,  207,
      149,  136,  135,  206,  205,  204,  203,  202,  162,  201,
      132,  129,  189,  188,  187,  186,  185,  184,  183,  182,
      181,  180,  165,  152,  151,  150,  146,   73,  145,  144,
      141,  140,  139,  136,  135,  133,  132,  129,  126,   73,
      516,   59,   59,   13,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,

      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516
    } ;

static const flex_int16_t yy_chk[1223] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    2,   25,
      527,    5,    2,    6,    7,    8,   31,   24,    3,    3,
        5,   28,    6,    7,    8,   27,    3,    2,    3,    2,
        2,   32,   23,   33,    2,    2,    2,  296,    3,    3,
        4,    4,   25,    3,    2,   23,    2,   30,    4,    2,

        4,   24,    5,   26,    6,   28,   45,    2,   27,   31,
        4,    4,   33,   29,   32,    4,   11,   11,   11,   11,
       12,   12,   12,   12,   17,   19,   17,   35,  296,   17,
       38,   37,   17,   17,   17,   30,   19,   36,   35,   26,
       39,   11,   37,   38,   45,   12,   15,  515,   15,   29,
       15,   15,   29,   40,   15,   15,   15,   36,   39,   19,
       40,   35,   19,   17,   35,   41,   19,   21,   35,   21,
       17,   42,   21,   51,   51,   21,   21,   21,   19,   43,
       35,   44,   41,   90,   49,   15,   49,   15,   54,   57,
       54,   57,   15,   15,   69,   47,   76,   69,   15,   20,

       65,   20,   42,   96,   20,   42,   21,   20,   20,   20,
       76,   20,   43,   21,   44,   47,   47,   95,   75,   89,
       47,   43,   90,   64,   88,   64,   92,   99,   64,   75,
       91,   64,   64,   64,   65,   97,   88,   65,   20,   96,
       95,   65,   93,  514,  112,   20,   34,   94,   34,   74,
       34,   34,   89,   65,   34,   34,   34,   92,  112,   91,
       74,  112,   64,   99,  113,   34,  114,   34,   34,   64,
       97,  114,   34,   34,   34,   93,   94,  117,  113,  175,
      117,   94,   34,   74,   34,   34,   74,   34,   98,  163,
       74,  170,   34,   34,  116,   34,  115,  119,   34,   80,

      115,   80,   74,   81,   80,   81,  513,   80,   80,   80,
      116,   81,   81,   81,   83,   81,   83,   98,  175,   84,
      170,   84,   83,   83,   83,   98,   83,   84,   84,   84,
      118,   84,   85,  101,   85,  119,  163,   85,   80,  122,
       85,   85,   85,  121,  120,   80,   82,  137,   82,  124,
      124,   82,  118,  167,   82,   82,   82,  166,   82,  122,
      122,  169,   83,  142,  122,  121,   84,  101,  142,  164,
      101,   85,  168,  166,  101,  120,  290,  512,   85,  121,
      178,  137,  120,  171,  137,   82,  101,  169,  137,  172,
      167,  229,   82,   86,   86,   86,  509,  153,   86,  153,

      137,   86,   86,   86,  168,  153,  153,  153,  154,  178,
      154,  171,  155,  154,  155,  164,  154,  154,  154,  173,
      155,  155,  155,  290,  174,  156,  176,  156,  157,  172,
      157,  229,   86,  156,  156,  156,  157,  157,  157,   86,
      157,  158,  177,  158,  179,  180,  190,  154,  180,  158,
      158,  158,  176,  158,  154,  174,  159,  173,  159,  190,
      155,  159,  192,  188,  159,  159,  159,  191,  193,  157,
      188,  193,  156,  194,  191,  192,  177,  195,  197,  158,
      196,  198,  179,  194,  199,  200,  234,  237,  235,  231,
      221,  238,  221,  508,  195,  159,  230,  196,  221,  221,

      221,  232,  159,  161,  161,  161,  231,  198,  161,  237,
      199,  161,  161,  161,  240,  197,  222,  238,  222,  234,
      223,  235,  223,  200,  222,  222,  222,  244,  223,  223,
      223,  221,  223,  230,  236,  224,  239,  224,  240,  232,
      233,  233,  161,  224,  224,  224,  236,  224,  241,  161,
      243,  226,  233,  226,  222,  242,  226,  256,  223,  226,
      226,  226,  257,  263,  258,  239,  244,  260,  264,  265,
      259,  261,  256,  241,  266,  236,  260,  257,  243,  258,
      259,  267,  262,  224,  233,  295,  261,  298,  242,  299,
      226,  262,  289,  267,  318,  297,  233,  226,  301,  285,

      263,  285,  294,  266,  264,  265,  318,  285,  285,  285,
      286,  295,  286,  299,  287,  304,  287,  300,  286,  286,
      286,  302,  287,  287,  287,  298,  287,  294,  297,  289,
      288,  305,  288,  291,  291,  317,  301,  285,  288,  288,
      288,  300,  288,  303,  303,  291,  319,  302,  304,  320,
      325,  321,  317,  305,  326,  303,  321,  322,  286,  287,
      323,  320,  327,  319,  288,  323,  322,  324,  324,  333,
      328,  351,  352,  355,  506,  333,  505,  291,  504,  324,
      357,  326,  328,  325,  358,  355,  327,  303,  347,  291,
      347,  360,  348,  366,  348,  362,  347,  347,  347,  303,

      348,  348,  348,  360,  349,  352,  349,  359,  361,  361,
      358,  324,  349,  349,  349,  351,  349,  365,  357,  350,
      361,  350,  362,  324,  366,  378,  348,  350,  350,  350,
      387,  350,  383,  347,  374,  374,  387,  378,  388,  380,
      397,  349,  406,  365,  380,  359,  394,  401,  411,  401,
      409,  402,  361,  402,  383,  401,  401,  401,  394,  402,
      402,  402,  409,  403,  361,  403,  405,  410,  412,  350,
      423,  403,  403,  403,  411,  403,  424,  418,  374,  410,
      412,  397,  397,  417,  401,  388,  404,  423,  404,  418,
      374,  406,  416,  416,  404,  404,  404,  427,  404,  430,

      424,  402,  405,  438,  416,  434,  435,  435,  417,  438,
      441,  430,  441,  442,  448,  442,  445,  450,  441,  441,
      441,  442,  442,  442,  458,  443,  448,  443,  451,  459,
      471,  458,  404,  443,  443,  443,  416,  443,  454,  454,
      451,  503,  450,  470,  427,  470,  434,  434,  416,  502,
      454,  470,  470,  470,  472,  459,  477,  478,  478,  442,
      479,  445,  477,  481,  485,  501,  472,  488,  488,  478,
      500,  491,  479,  443,  507,  481,  485,  471,  510,  499,
      498,  507,  454,  491,  497,  510,  496,  495,  493,  492,
      490,  470,  487,  486,  454,  484,  483,  482,  480,  476,

      475,  478,  474,  469,  467,  466,  465,  464,  462,  461,
      460,  488,  457,  478,  456,  455,  453,  449,  446,  444,
      439,  437,  436,  488,  517,  517,  517,  517,  517,  517,
      518,  518,  518,  518,  518,  518,  519,  519,  519,  519,
      519,  519,  520,  520,  520,  520,  520,  520,  521,  521,
      522,  433,  522,  522,  522,  523,  523,  431,  523,  523,
      523,  524,  524,  524,  524,  524,  524,  525,  429,  525,
      525,  526,  526,  526,  526,  526,  526,  528,  528,  528,
      528,  528,  528,  529,  428,  426,  529,  425,  421,  420,
      419,  415,  413,  408,  407,  400,  399,  398,  395,  393,

      392,  391,  390,  389,  386,  385,  384,  382,  377,  376,
      375,  373,  372,  371,  370,  369,  368,  367,  364,  356,
      354,  346,  345,  344,  343,  341,  340,  339,  338,  337,
      336,  335,  334,  332,  331,  330,  329,  316,  315,  314,
      313,  312,  311,  310,  309,  308,  307,  306,  293,  284,
      283,  282,  281,  280,  279,  278,  277,  276,  275,  274,
      273,  272,  271,  270,  269,  268,  255,  254,  253,  252,
      251,  250,  249,  248,  247,  246,  245,  228,  227,  220,
      219,  218,  217,  216,  214,  213,  212,  211,  210,  209,
      208,  207,  206,  205,  204,  203,  202,  201,  189,  187,

      186,  185,  184,  183,  182,  181,  165,  160,  152,  151,
      150,  149,  148,  147,  145,  144,  143,  141,  140,  139,
      138,  136,  134,  133,  132,  131,  130,  129,  128,  127,
      125,  123,  111,  110,  109,  108,  107,  106,  105,  104,
      103,  102,   87,   79,   78,   77,   73,   72,   71,   70,
       68,   67,   66,   61,   58,   55,   52,   50,   48,   18,
       13,   10,    9,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,

      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  516
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexFrontendCc.lex"
#line 2 "lexFrontendCc.lex"

/**
 *  Copyright(c) 1997 FRIDU a Free Software Company [fridu@fridu.bzh]
 *
 * File      :   yaccCcWrap.y define wrapper grammar
 * Projet    :   Rubicon/jTcl
 * Module    :   jTcl C++ wrapper
 * Auteur    :   Fulup Ar Foll [Fulup@fridu.bzh]
 *
 * Last
 *      Author      : $Author: Fulup $
 *      Date        : $Date: 1999/03/11 12:49:29 $
 *      Revision    : $Revision: 1.3.0.1 $
 *      Source      : $Source: /Master/jWrap/frontend/cc/lexFrontendCc.lex,v $
 *
 * Modification History
 * --------------------
 * 01a,18apr98,Fulup moved to new tree
 * 01a,06feb98,Fulup,written from jDoc & doc++ & swig and many others.
 */

/*
 *	includes
 */

#include "libFrontendCc.h"
#include "yaccFrontendCc.h"


LOCAL  int yySavedMode, yyPreCommentMode;
LOCAL  int yyBrace=0;
LOCAL  int yyCheckEOL = FALSE;

// remove leading ans trailling space from a string
LOCAL char * strip (char *token) {
 int ind;
 int start=0;

 // jump over any space or tab characters
 for (ind=0; token [ind] != 0; ind++) {
   if ((token [ind] != ' ') && (token [ind] != '\t')) break;
 }
 if (token [ind] != '\0') start = ind;

 // clean the end
 for (ind=strlen (&token [start])-1
     ; ((token [ind] == ' ') || (token [ind] == '\t'))
     ; ind--)
 ;
 token [ind] = '\0';

 return (&token [ind]);
} // end strip

LOCAL  void debugMsg (int level , const char *token)
{
  if ((debugLevel>=level) || (-1*debugLevel==level)) {
     if (asDebugYacc) {
        printf ("\n");
        asDebugYacc = FALSE;
     }

     if (yycc_text [yycc_leng-1] == '\n')  yycc_text [yycc_leng-1] = '\0';
     printf("%3d flex (%2d) [%3d] %-15s =|%s|\n"
           ,level,YYSTATE,currentProgram->numLine,token,yycc_text);
  }
} // end debugMsg

#line 1211 "lexFrontendCc.cxx"
/* define few usefull macro */
/* %s STartMode %x Exclusive startmode */

#line 1215 "lexFrontendCc.cxx"

#define INITIAL 0
#define InComment 1
#define InIgnore 2
#define InCode 3
#define InLineMode 4
#define InNumeric 5

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 87 "lexFrontendCc.lex"


#line 1443 "lexFrontendCc.cxx"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 517 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1164 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 89 "lexFrontendCc.lex"
{
  // CPP Assert implement is use for not including class proto when compiling implementation
  debugMsg (6,"IMPLEMENT_TAG");
  return IMPLEMENT_TAG;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 95 "lexFrontendCc.lex"
{
  // CPP ignore any preprocessing directive
  debugMsg (9,"Ignore Preprocessing directive");
  yycc_IgnoreUntilEOL();
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 101 "lexFrontendCc.lex"
{
  // CPP use to debug and abort parsing
  fprintf (stderr,"##### Abort instruction founded ####\n");
  return G_ERROR;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 107 "lexFrontendCc.lex"
{
  // CPP
  debugMsg (8,"WARNING_TAG");
  yySavedMode = YYSTATE;
  BEGIN InLineMode;
  return WARNING_TAG;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 115 "lexFrontendCc.lex"
{
  // CPP Go got a CPP line number header
  debugMsg (8,"LINE_TAG");
  (void)sscanf (yycc_text,"# %d",&yycc_lval.intVar);
  return LINE_TAG;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 122 "lexFrontendCc.lex"
{
  // CPP We check first include line because it should be after assert
  if (currentProgram->firstInclude <0) {
     debugMsg (6,"FirstInclude");
     currentProgram->firstInclude = currentProgram->numLine;
  } else {
     debugMsg (10,"Ignoring Include");
  }
  yycc_IgnoreUntilEOL();
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 133 "lexFrontendCc.lex"
{
  // CPP Define as a program special enum
  debugMsg (6,"DEFINE_TAG");
  yyCheckEOL = TRUE;
  return DEFINE_TAG;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 140 "lexFrontendCc.lex"
{
  // CPP Define as a program special enum
  debugMsg (10,"ignoring Macro with param");
  yycc_IgnoreUntilEOL ();
}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 146 "lexFrontendCc.lex"
{
  // SECTION We got a class we allocate object and add it in program list
  yyless (sizeof ("class")-1);
  debugMsg (6,"CLASS_TAG");
  return CLASS_TAG;
}
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 153 "lexFrontendCc.lex"
{
  // SECTION We got a class we allocate object and add it in program list
  yyless (sizeof ("interface")-1);
  debugMsg (6,"CLASS_TAG");
  return CLASS_TAG;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 160 "lexFrontendCc.lex"
{
  // SECTION We got public tag inside class
  debugMsg (6,"SECTION_TAG");
  yycc_lval.prot = PROT_PUBLIC;
  currentVisibility =  yycc_lval.prot;
  return SECTION_TAG;
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 168 "lexFrontendCc.lex"
{
  // SECTION We got public tag inside class
  debugMsg (6,"SECTION_TAG");
  yycc_lval.prot = PROT_PRIVATE;
  currentVisibility =  yycc_lval.prot;
  return SECTION_TAG;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 176 "lexFrontendCc.lex"
{
  // SECTION We got protected tag inside class
  debugMsg (6,"SECTION_TAG");
  yycc_lval.prot = PROT_PROTECTED;
  currentVisibility =  yycc_lval.prot;
  return SECTION_TAG;
}
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 184 "lexFrontendCc.lex"
{
  // TYPE enumeration
  yyless (sizeof ("enum")-1);
  debugMsg (6,"ENUM_TAG");
  return ENUM_TAG;
}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 191 "lexFrontendCc.lex"
{
  // TYPE typedef
  yyless (sizeof ("typedef")-1);
  debugMsg (3,"TYPEDEF_TAG");
  return TYPEDEF_TAG;
}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 198 "lexFrontendCc.lex"
{
  // TYPE struct
  yyless (sizeof ("struct")-1);
  debugMsg (3,"STRUCT_TAG");
  return STRUCT_TAG;
}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 205 "lexFrontendCc.lex"
{
  // TYPE Union
  yyless (sizeof ("union")-1);
  debugMsg (3,"UNION_TAG");
  return UNION_TAG;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 212 "lexFrontendCc.lex"
{
  // TYPE We got static tag
  debugMsg (6,"STATIC_TAG");
  return STATIC_TAG;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 218 "lexFrontendCc.lex"
{
  // TYPE We got public tag
  debugMsg (6,"PUBLIK_TAG");
  return PUBLIK_TAG;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 224 "lexFrontendCc.lex"
{
  // TYPE We got public tag
  debugMsg (6,"PUBLIK_TAG");
  return PUBLIK_TAG;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 230 "lexFrontendCc.lex"
{
  // TYPE We got public tag inside class
  debugMsg (6,"VIRTUAL_TAG");
  return VIRTUAL_TAG;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 236 "lexFrontendCc.lex"
{
  // TYPE Get valid method name
  debugMsg (11,"G_WORD DoubleDot");
   yycc_lval.dString = new McString (yytext);
  return G_WORD;
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 243 "lexFrontendCc.lex"
{
  // TYPE some people cut long and int
   debugMsg (8,"G_WORD");
   yycc_lval.dString = new McString ("long");
   return G_WORD;
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 250 "lexFrontendCc.lex"
{
  // TYPE some people cut & and var name
   debugMsg (8,"G_WORD &");
   yycc_lval.dString = new McString (yytext);
   return G_WORD;
}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 257 "lexFrontendCc.lex"
{
   // TYPE Handle complex type
   yyless (sizeof ("unsigned")-1);
   debugMsg (8,"COMPLEX_TYPE");
   yycc_lval.dString = new McString (yycc_text);
   return COMPLEX_TYPE;
}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 265 "lexFrontendCc.lex"
{
   // TYPE Handle complex type
   yyless (sizeof ("const")-1);
   debugMsg (8,"CONST_TYPE");
   yycc_lval.dString = new McString (yycc_text);
   return CONST_TYPE;
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 273 "lexFrontendCc.lex"
{
  // GENERIC Sigle char processing
  switch (yycc_text[0]) {
    case '*': {
      debugMsg (6,"G_PTR");
      return G_PTR;
    }
    case ':': {
      debugMsg (6,"SUPER_TAG");
      return SUPER_TAG;
    }
    case  ';': {
      debugMsg (8,"G_END");
      return G_END;
    }
    case  ',': {
      debugMsg (8,"G_SEPARATOR");
      return G_SEPARATOR;
    }
    case  '=': {
      debugMsg (8,"G_EQUAL");
      return G_EQUAL;
    }
    case '(': {
      debugMsg (8,"OPEN_PRM");
      return OPEN_PRM;
    }
    case ')': {
      debugMsg (8,"CLOSE_PRM");
      return CLOSE_PRM;
    }
    case '{': {
      debugMsg (7,"OPEN_BRACE");
      return OPEN_BRACE;
    }
    case '}': {
      debugMsg (7,"CLOSE_BRACE");
      return CLOSE_BRACE;
    }
    case '[': {
      debugMsg (7,"OPEN_BRAKET");
      yySavedMode = YYSTATE;
      BEGIN InNumeric;
      return OPEN_BRAKET;
    }
    case ']': {
      debugMsg (7,"CLOSE_BRAKET");
      return CLOSE_BRAKET;
    }
    case ' ':
    case '\t':
    {
      debugMsg (15,"Ignoring Space");
      break;
    }
    case '\r':
    {
      debugMsg (15,"Ignoring CTRL-M [WinDos=>Burk!!!]");
      break;
    }
    // ignore all other characters
    default:
      debugMsg (9,"Single Char Word");
      yycc_lval.dString = new McString (yycc_text);
      return G_WORD;
  }
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 341 "lexFrontendCc.lex"
{
  // GENERIC rules for a stripped word value
  debugMsg (8,"G_WORD");
  yycc_lval.dString = new McString (yycc_text);
  return G_WORD;
}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 348 "lexFrontendCc.lex"
{
  // NUMBER process basic values
  debugMsg (7,"G_NUM");
  sscanf  (yycc_text,"%d", &yycc_lval.intVar);
  return G_NUM;
}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 355 "lexFrontendCc.lex"
{
  // NUMBER process basic values
  debugMsg (7,"G_OPERATOR");
  yycc_lval.intVar = yycc_text [0];
  return G_OPERATOR;
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 362 "lexFrontendCc.lex"
{
  // NUMBER End of Number
  debugMsg (6,"CLOSE_BRAKET");
  BEGIN yySavedMode;
  return CLOSE_BRAKET;
}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 370 "lexFrontendCc.lex"
{
  // GENERIC Update current line counter
  if (yyCheckEOL) {
    yyCheckEOL = FALSE;
    debugMsg (8,"G_EOL");
    currentProgram->numLine   ++;
    currentProgram->ownerLine ++;
    return G_EOL;
  }
  debugMsg (19,"Ignore eol");
  currentProgram->numLine   ++;
  currentProgram->ownerLine ++;
}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 384 "lexFrontendCc.lex"
{
  // LINE return all the end of line to Yacc
  currentProgram->numLine   ++;
  currentProgram->ownerLine ++;
  // remove any new line or ctrl-M [dos!!!]
  if (yycc_text [yycc_leng-2] == '\r') yycc_text [yycc_leng-2] = '\0';
  if (yycc_text [yycc_leng-1] == '\n') yycc_text [yycc_leng-1] = '\0';
  debugMsg (7,"G_LINE");
  yycc_lval.dString = new McString (yycc_text);
  BEGIN yySavedMode;
  return G_LINE;
}
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 397 "lexFrontendCc.lex"
{
  // COMMENT get javaDoc start tag save current mode and return all word until end of doc
  McString *doc =  new (McString);
  int c1=0;
  int c2=yytext[3];

  // if already in comment ignore
  if  (YYSTATE == InComment) goto ignoreDoc;

  debugMsg (8,"DOC_BLOCK start");

  if (c2 == '\n') {
     currentProgram->numLine   ++;
     currentProgram->ownerLine ++;
  }

  for (;;) {
    // check we are not facing end of file and end of comment
    if (c2 == EOF) break;
    if (c1 == '*' && c2 == '/') break;
    c1 = c2;
    // read new character from lex flow
    c2 = yyinput();

    // ignore \m (hugly dos)
    if (c2 == '\r') continue;

    // don't forget counting line for yacc error message
    if (c2 == '\n') {
       currentProgram->numLine   ++;
       currentProgram->ownerLine ++;
    }

    // ignore any not basic char double character
    if ((c1 == c2 ) && (c1 < '0')) continue;

    // add character in current block doc
    *doc += c1;
  }

  debugMsg (8,"DOC_BLOCK end");
  yycc_lval.dString = doc;
  return DOC_BLOCK;

 ignoreDoc:
   debugMsg (10,"DOC_BLOCK ignored");
}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 445 "lexFrontendCc.lex"
{
  // COMMENT Ignore C++ comment
  currentProgram->numLine ++;
  currentProgram->ownerLine ++;
  debugMsg (12,"Ignoring c++ comment");
}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 452 "lexFrontendCc.lex"
{
  // COMMENT remove C comment but check for file: help line
  debugMsg (11,"Start comment");
  yyPreCommentMode = YYSTATE;
  BEGIN InComment;
  }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 459 "lexFrontendCc.lex"
{
  // COMMENT Search Program name
  debugMsg (6,"FILE_TAG");
  yySavedMode = YYSTATE;
  BEGIN  InLineMode;
  return FILE_TAG;
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 467 "lexFrontendCc.lex"
{
  // COMMENT Search Program name
  debugMsg (6,"IMPLEMENT_TAG");
  yySavedMode = YYSTATE;
  BEGIN  InLineMode;
  return IMPLEMENT_TAG;
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 475 "lexFrontendCc.lex"
{
  // In comment we just ignore any signle char
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 479 "lexFrontendCc.lex"
{
  // COMMENT got end comment tag
  debugMsg (11,"End comment (all ignored)");
  BEGIN yyPreCommentMode;
}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 485 "lexFrontendCc.lex"
{
  // IGNORE In Code we count {} in order closing InCode mode at block end
  switch (yycc_text[0]) {
    case ';':
     if (yyBrace == 0) {
      BEGIN  yySavedMode;
      debugMsg (7,"End Mono instruction Code G_END");
      return G_END;
     }
     break;
    case '{':             /* } for editor matching */
      debugMsg (12,"Ignore open brace InCode");
      yyBrace ++;
      break;
    case '\\':              /* ignore next character what ever it is */
      debugMsg (12,"Ignore \\ and next character");
      yyinput();
      break;
    case '}':
      yyBrace --;
      if (yyBrace == 0)
      {
        BEGIN  yySavedMode;
        debugMsg (7,"End Code END_CODE");
        return END_CODE;
      } else {
        debugMsg (9,"Ignore close brace InCode");
      }
      break;
    default:             /* Ignore */
      debugMsg (15,"Ignoring");

  }  // Reset previous mode when end of code founded
}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 520 "lexFrontendCc.lex"
{
  // IGNORE  User can stop/restart parsing with no influence on Yacc
  debugMsg (2,"JWrap Ignore Start");
  yySavedMode= YYSTATE;
  BEGIN InIgnore;
}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 527 "lexFrontendCc.lex"
{
  // IGNORE
  debugMsg (2,"jWrap Ignore End");
  BEGIN yySavedMode;
}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 533 "lexFrontendCc.lex"
{
  // IGNORE any C++ template
  debugMsg (6,"IGNORE_TAG");
  return IGNORE_TAG;
}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 539 "lexFrontendCc.lex"
{
  // IGNORE we got an inline proc and ingore ir
  debugMsg (8,"IGNORE_TAG");
  return IGNORE_TAG;
}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 545 "lexFrontendCc.lex"
{
  // IGNORE we got an inline proc and ingore ir
  debugMsg (10,"Ignoring Inline");
  yycc_IgnoreUntilEOB (0);
}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 551 "lexFrontendCc.lex"
ECHO;
	YY_BREAK
#line 2117 "lexFrontendCc.cxx"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(InComment):
case YY_STATE_EOF(InIgnore):
case YY_STATE_EOF(InCode):
case YY_STATE_EOF(InLineMode):
case YY_STATE_EOF(InNumeric):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 517 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 517 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 516);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 551 "lexFrontendCc.lex"


// Allows yacc to replace lex in INITIAL mode
PUBLIC void yycc_ModeInitial ()
{
   debugMsg (7,"Reset Initial mode");
   BEGIN INITIAL;
}

PUBLIC void yycc_ModeRestore ()
{
   debugMsg (7,"Reset Saved mode");
   BEGIN yySavedMode;
}


PUBLIC void yycc_ModeSet (int mode)
{
   debugMsg (7,"Reset mode");
   BEGIN mode;
}

PUBLIC int yycc_ModeGet ()
{
   debugMsg (7,"Get mode");
   return yySavedMode;
}

PUBLIC void yycc_StartCode (int brace) {
  // Just ignore any piece of code we could find out
  debugMsg (7,"Start Code");
  yySavedMode = YYSTATE;
  BEGIN InCode;
  yyBrace = brace;
}

// Ignore until endofline
PUBLIC void yycc_IgnoreUntilEOL ()
{
  debugMsg (12,"Ignore until end of line");
  int c1=0;
  int c2=yyinput();

  // reset line eol check if any
  yyCheckEOL = FALSE;

  // if we already point on endofline update counters
  if (c2 == '\n') {
      currentProgram->numLine   ++;
      currentProgram->ownerLine ++;
  }

  for (;;) {
    // check we are not facing and continuation \
    if (c2 == EOF) break;
    if (c1 != '\\' && c2 == '\n') break;
    c1 = c2;
    // read new character from lex flow
    c2 = yyinput();
    // don't forget counting line for yacc error message
    if (c2 == '\n') {
       currentProgram->numLine   ++;
       currentProgram->ownerLine ++;
    }
  }
}

// Allows yacc to replace lex in INITIAL mode
PUBLIC void yycc_IgnoreUntilEOB (int brace)
{
  debugMsg (12,"Search end of block");
  int c1=0;
  int c2=yyinput();

  for (;;) {
    // check we are not facing and continuation
    if (c2 == EOF) break;

    // compute brace in order findinf embedded code
    if (c2 == '{') brace ++;
    if (c2 == '}') brace --;

    // leave at ; and avoid protected \;
    if (c1 != '\\' && c2 == ';' && brace == 0) break;
    c1 = c2;

    // read new character from lex flow
    c2 = yyinput();

    // don't forget counting line for yacc error message
    if (c2 == '\n') {
       currentProgram->numLine   ++;
       currentProgram->ownerLine ++;
    }
  }
} // yycc_IgnoreUntilEOB

// Allows yacc to replace lex in INITIAL mode
PUBLIC void yycc_IgnoreUntilBalancedBrace (int brace)
{
  debugMsg (12,"Search separator");
  int c1=0;
  int c2=yyinput();

  for (;;) {
    // check we are not facing and continuation
    if (c2 == EOF) break;

    // compute brace in order findinf embedded code
    if (c2 == '(') brace ++;
    if (c2 == ')') brace --;

    // leave at ; and avoid protected \;
    if (brace == 0) {
      break;
    }
    c1 = c2;

    // read new character from lex flow
    c2 = yyinput();

    // don't forget counting line for yacc error message
    if (c2 == '\n') {
       currentProgram->numLine   ++;
       currentProgram->ownerLine ++;
    }
  }
} // yycc_IgnoreUntilSEP

extern "C" {
int	yycc_wrap()	{ return 1 ; }
};

